Module,Function,Level,Time,Message
__main__,speed_test,INFO,2022-06-10 19:03:52,"Starting speed test"
__main__,random_int,INFO,2022-06-10 19:03:52,"Started random_int test with filetype parquet and a maximum of 100,000,000 rows (small_table=True, 60% nuniques)"
testing.test_ml,generate_random_int_dataframe,DEBUG,2022-06-10 19:03:52,"Generating random_int table with 100 rows and 10 columns (60% nuniques)"
testing.test_ml,generate_random_int_dataframe,DEBUG,2022-06-10 19:03:52,"Generating random_int table with 1,000 rows and 10 columns (60% nuniques)"
testing.test_ml,generate_random_int_dataframe,DEBUG,2022-06-10 19:03:52,"Generating random_int table with 10,000 rows and 10 columns (60% nuniques)"
testing.test_ml,generate_random_int_dataframe,DEBUG,2022-06-10 19:03:52,"Generating random_int table with 100,000 rows and 10 columns (60% nuniques)"
testing.test_ml,generate_random_int_dataframe,DEBUG,2022-06-10 19:03:53,"Generating random_int table with 1,000,000 rows and 10 columns (60% nuniques)"
testing.test_ml,generate_random_int_dataframe,DEBUG,2022-06-10 19:03:56,"Generating random_int table with 5,000,000 rows and 10 columns (60% nuniques)"
testing.test_ml,generate_random_int_dataframe,DEBUG,2022-06-10 19:04:13,"Generating random_int table with 10,000,000 rows and 10 columns (60% nuniques)"
testing.test_ml,generate_random_int_dataframe,DEBUG,2022-06-10 19:04:47,"Generating random_int table with 50,000,000 rows and 10 columns (60% nuniques)"
testing.test_ml,generate_random_int_dataframe,DEBUG,2022-06-10 19:07:32,"Generating random_int table with 100,000,000 rows and 10 columns (60% nuniques)"
testing.test_ml,test_model,INFO,2022-06-10 19:12:57,"Started testing of a model with 5 rows"
testing.test_ml,test_model,DEBUG,2022-06-10 19:12:59,"Model on table 1 (100-10.parquet)"
algorithms.machine_learning,find_unique_columns,DEBUG,2022-06-10 19:13:00,"Preparation: 0.014480438083410263s, prediction: 0.8993541486561298s"
testing.test_ml,test_model,DEBUG,2022-06-10 19:13:00,"Model on table 2 (1000-10.parquet)"
algorithms.machine_learning,find_unique_columns,DEBUG,2022-06-10 19:13:01,"Preparation: 0.013319306075572968s, prediction: 0.8791171871125698s"
testing.test_ml,test_model,DEBUG,2022-06-10 19:13:01,"Model on table 3 (10000-10.parquet)"
algorithms.machine_learning,find_unique_columns,DEBUG,2022-06-10 19:13:02,"Preparation: 0.012985270470380783s, prediction: 0.8818213753402233s"
testing.test_ml,test_model,DEBUG,2022-06-10 19:13:02,"Model on table 4 (100000-10.parquet)"
algorithms.machine_learning,find_unique_columns,DEBUG,2022-06-10 19:13:03,"Preparation: 0.013201314955949783s, prediction: 0.8837379179894924s"
testing.test_ml,test_model,DEBUG,2022-06-10 19:13:03,"Model on table 5 (1000000-10.parquet)"
algorithms.machine_learning,find_unique_columns,DEBUG,2022-06-10 19:13:04,"Preparation: 0.013156022876501083s, prediction: 0.8884483054280281s"
testing.test_ml,test_model,DEBUG,2022-06-10 19:13:06,"Model on table 6 (10000000-10.parquet)"
algorithms.machine_learning,find_unique_columns,DEBUG,2022-06-10 19:13:07,"Preparation: 0.013172127306461334s, prediction: 0.8806310817599297s"
testing.test_ml,test_model,DEBUG,2022-06-10 19:13:32,"Model on table 7 (100000000-10.parquet)"
algorithms.machine_learning,find_unique_columns,DEBUG,2022-06-10 19:13:34,"Preparation: 0.01308375969529152s, prediction: 0.8820896148681641s"
testing.test_ml,test_model,DEBUG,2022-06-10 19:19:19,"Model on table 8 (5000000-10.parquet)"
algorithms.machine_learning,find_unique_columns,DEBUG,2022-06-10 19:19:20,"Preparation: 0.013274580240249634s, prediction: 0.8796724490821362s"
testing.test_ml,test_model,DEBUG,2022-06-10 19:19:32,"Model on table 9 (50000000-10.parquet)"
algorithms.machine_learning,find_unique_columns,DEBUG,2022-06-10 19:19:34,"Preparation: 0.012993723154067993s, prediction: 0.8835422471165657s"
testing.test_ml,test_model,DEBUG,2022-06-10 19:22:06,"Naive algorithm on table 1 (100-10.parquet)"
testing.test_ml,test_model,DEBUG,2022-06-10 19:22:06,"Naive algorithm on table 2 (1000-10.parquet)"
testing.test_ml,test_model,DEBUG,2022-06-10 19:22:06,"Naive algorithm on table 3 (10000-10.parquet)"
testing.test_ml,test_model,DEBUG,2022-06-10 19:22:06,"Naive algorithm on table 4 (100000-10.parquet)"
testing.test_ml,test_model,DEBUG,2022-06-10 19:22:06,"Naive algorithm on table 5 (1000000-10.parquet)"
testing.test_ml,test_model,DEBUG,2022-06-10 19:22:11,"Naive algorithm on table 6 (10000000-10.parquet)"
testing.test_ml,test_model,DEBUG,2022-06-10 19:23:14,"Naive algorithm on table 7 (100000000-10.parquet)"
testing.test_ml,test_model,DEBUG,2022-06-10 19:37:35,"Naive algorithm on table 8 (5000000-10.parquet)"
testing.test_ml,test_model,DEBUG,2022-06-10 19:38:05,"Naive algorithm on table 9 (50000000-10.parquet)"
testing.test_ml,test_model,INFO,2022-06-10 19:44:28,"Finished testing"
__main__,random_int,INFO,2022-06-10 19:44:28,"Finished random_int test"
__main__,random_int,INFO,2022-06-10 19:44:28,"Started random_int test with filetype parquet and a maximum of 100,000,000 rows (small_table=False, 60% nuniques)"
testing.test_ml,test_model,INFO,2022-06-10 19:44:28,"Started testing of a model with 5 rows"
testing.test_ml,test_model,DEBUG,2022-06-10 19:44:30,"Model on table 1 (100-10.parquet)"
algorithms.machine_learning,find_unique_columns,DEBUG,2022-06-10 19:44:31,"Preparation: 0.013269547373056412s, prediction: 0.8795597143471241s"
testing.test_ml,test_model,DEBUG,2022-06-10 19:44:31,"Model on table 2 (1000-10.parquet)"
algorithms.machine_learning,find_unique_columns,DEBUG,2022-06-10 19:44:32,"Preparation: 0.012988898903131485s, prediction: 0.8799146339297295s"
testing.test_ml,test_model,DEBUG,2022-06-10 19:44:32,"Model on table 3 (10000-10.parquet)"
algorithms.machine_learning,find_unique_columns,DEBUG,2022-06-10 19:44:33,"Preparation: 0.012928742915391922s, prediction: 0.8794977441430092s"
testing.test_ml,test_model,DEBUG,2022-06-10 19:44:33,"Model on table 4 (100000-10.parquet)"
algorithms.machine_learning,find_unique_columns,DEBUG,2022-06-10 19:44:34,"Preparation: 0.012903377413749695s, prediction: 0.8822908625006676s"
testing.test_ml,test_model,DEBUG,2022-06-10 19:44:34,"Model on table 5 (1000000-10.parquet)"
algorithms.machine_learning,find_unique_columns,DEBUG,2022-06-10 19:44:35,"Preparation: 0.01329529657959938s, prediction: 0.8822806365787983s"
testing.test_ml,test_model,DEBUG,2022-06-10 19:44:36,"Model on table 6 (10000000-10.parquet)"
algorithms.machine_learning,find_unique_columns,DEBUG,2022-06-10 19:44:38,"Preparation: 0.013455957174301147s, prediction: 0.8831212297081947s"
testing.test_ml,test_model,DEBUG,2022-06-10 19:45:03,"Model on table 7 (100000000-10.parquet)"
algorithms.machine_learning,find_unique_columns,DEBUG,2022-06-10 19:45:09,"Preparation: 0.013767823576927185s, prediction: 0.8913879208266735s"
testing.test_ml,test_model,DEBUG,2022-06-10 19:50:52,"Model on table 8 (5000000-10.parquet)"
algorithms.machine_learning,find_unique_columns,DEBUG,2022-06-10 19:50:53,"Preparation: 0.014386408030986786s, prediction: 0.8916814997792244s"
testing.test_ml,test_model,DEBUG,2022-06-10 19:51:05,"Model on table 9 (50000000-10.parquet)"
algorithms.machine_learning,find_unique_columns,DEBUG,2022-06-10 19:51:08,"Preparation: 0.013770177960395813s, prediction: 0.894194208085537s"
testing.test_ml,test_model,DEBUG,2022-06-10 19:53:40,"Naive algorithm on table 1 (100-10.parquet)"
testing.test_ml,test_model,DEBUG,2022-06-10 19:53:40,"Naive algorithm on table 2 (1000-10.parquet)"
testing.test_ml,test_model,DEBUG,2022-06-10 19:53:40,"Naive algorithm on table 3 (10000-10.parquet)"
testing.test_ml,test_model,DEBUG,2022-06-10 19:53:40,"Naive algorithm on table 4 (100000-10.parquet)"
testing.test_ml,test_model,DEBUG,2022-06-10 19:53:40,"Naive algorithm on table 5 (1000000-10.parquet)"
testing.test_ml,test_model,DEBUG,2022-06-10 19:53:45,"Naive algorithm on table 6 (10000000-10.parquet)"
testing.test_ml,test_model,DEBUG,2022-06-10 19:54:48,"Naive algorithm on table 7 (100000000-10.parquet)"
testing.test_ml,test_model,DEBUG,2022-06-10 20:09:14,"Naive algorithm on table 8 (5000000-10.parquet)"
testing.test_ml,test_model,DEBUG,2022-06-10 20:09:44,"Naive algorithm on table 9 (50000000-10.parquet)"
testing.test_ml,test_model,INFO,2022-06-10 20:16:05,"Finished testing"
__main__,random_int,INFO,2022-06-10 20:16:05,"Finished random_int test"
__main__,random_int,INFO,2022-06-10 20:16:05,"Started random_int test with filetype csv and a maximum of 100,000,000 rows (small_table=False, 60% nuniques)"
testing.test_ml,generate_random_int_dataframe,DEBUG,2022-06-10 20:16:05,"Generating random_int table with 100 rows and 10 columns (60% nuniques)"
testing.test_ml,generate_random_int_dataframe,DEBUG,2022-06-10 20:16:05,"Generating random_int table with 1,000 rows and 10 columns (60% nuniques)"
testing.test_ml,generate_random_int_dataframe,DEBUG,2022-06-10 20:16:05,"Generating random_int table with 10,000 rows and 10 columns (60% nuniques)"
testing.test_ml,generate_random_int_dataframe,DEBUG,2022-06-10 20:16:05,"Generating random_int table with 100,000 rows and 10 columns (60% nuniques)"
testing.test_ml,generate_random_int_dataframe,DEBUG,2022-06-10 20:16:06,"Generating random_int table with 1,000,000 rows and 10 columns (60% nuniques)"
testing.test_ml,generate_random_int_dataframe,DEBUG,2022-06-10 20:16:10,"Generating random_int table with 5,000,000 rows and 10 columns (60% nuniques)"
testing.test_ml,generate_random_int_dataframe,DEBUG,2022-06-10 20:16:36,"Generating random_int table with 10,000,000 rows and 10 columns (60% nuniques)"
testing.test_ml,generate_random_int_dataframe,DEBUG,2022-06-10 20:17:32,"Generating random_int table with 50,000,000 rows and 10 columns (60% nuniques)"
testing.test_ml,generate_random_int_dataframe,DEBUG,2022-06-10 20:22:15,"Generating random_int table with 100,000,000 rows and 10 columns (60% nuniques)"
testing.test_ml,test_model,INFO,2022-06-10 20:31:32,"Started testing of a model with 5 rows"
testing.test_ml,test_model,DEBUG,2022-06-10 20:31:34,"Model on table 1 (100-10.csv)"
algorithms.machine_learning,find_unique_columns,DEBUG,2022-06-10 20:31:35,"Preparation: 0.01317824050784111s, prediction: 0.8900735899806023s"
testing.test_ml,test_model,DEBUG,2022-06-10 20:31:35,"Model on table 2 (1000-10.csv)"
algorithms.machine_learning,find_unique_columns,DEBUG,2022-06-10 20:31:35,"Preparation: 0.012896645814180374s, prediction: 0.8870647102594376s"
testing.test_ml,test_model,DEBUG,2022-06-10 20:31:35,"Model on table 3 (10000-10.csv)"
algorithms.machine_learning,find_unique_columns,DEBUG,2022-06-10 20:31:36,"Preparation: 0.012878429144620895s, prediction: 0.8858286365866661s"
testing.test_ml,test_model,DEBUG,2022-06-10 20:31:36,"Model on table 4 (100000-10.csv)"
algorithms.machine_learning,find_unique_columns,DEBUG,2022-06-10 20:31:37,"Preparation: 0.013502407819032669s, prediction: 0.8841199465095997s"
testing.test_ml,test_model,DEBUG,2022-06-10 20:31:37,"Model on table 5 (1000000-10.csv)"
algorithms.machine_learning,find_unique_columns,DEBUG,2022-06-10 20:31:39,"Preparation: 0.013516675680875778s, prediction: 0.8850554525852203s"
testing.test_ml,test_model,DEBUG,2022-06-10 20:31:41,"Model on table 6 (10000000-10.csv)"
algorithms.machine_learning,find_unique_columns,DEBUG,2022-06-10 20:31:46,"Preparation: 0.013557184487581253s, prediction: 0.8845761492848396s"
testing.test_ml,test_model,DEBUG,2022-06-10 20:32:12,"Model on table 7 (100000000-10.csv)"
algorithms.machine_learning,find_unique_columns,DEBUG,2022-06-10 20:33:07,"Preparation: 0.013645853847265244s, prediction: 0.891197957098484s"
testing.test_ml,test_model,DEBUG,2022-06-10 20:38:49,"Model on table 8 (5000000-10.csv)"
algorithms.machine_learning,find_unique_columns,DEBUG,2022-06-10 20:38:52,"Preparation: 0.013828478753566742s, prediction: 0.8842038623988628s"
testing.test_ml,test_model,DEBUG,2022-06-10 20:39:04,"Model on table 9 (50000000-10.csv)"
algorithms.machine_learning,find_unique_columns,DEBUG,2022-06-10 20:39:33,"Preparation: 0.013620849698781967s, prediction: 0.8821923732757568s"
testing.test_ml,test_model,DEBUG,2022-06-10 20:42:06,"Naive algorithm on table 1 (100-10.csv)"
testing.test_ml,test_model,DEBUG,2022-06-10 20:42:06,"Naive algorithm on table 2 (1000-10.csv)"
testing.test_ml,test_model,DEBUG,2022-06-10 20:42:06,"Naive algorithm on table 3 (10000-10.csv)"
testing.test_ml,test_model,DEBUG,2022-06-10 20:42:06,"Naive algorithm on table 4 (100000-10.csv)"
testing.test_ml,test_model,DEBUG,2022-06-10 20:42:06,"Naive algorithm on table 5 (1000000-10.csv)"
testing.test_ml,test_model,DEBUG,2022-06-10 20:42:11,"Naive algorithm on table 6 (10000000-10.csv)"
testing.test_ml,test_model,DEBUG,2022-06-10 20:43:19,"Naive algorithm on table 7 (100000000-10.csv)"
testing.test_ml,test_model,DEBUG,2022-06-10 20:58:30,"Naive algorithm on table 8 (5000000-10.csv)"
testing.test_ml,test_model,DEBUG,2022-06-10 20:59:01,"Naive algorithm on table 9 (50000000-10.csv)"
testing.test_ml,test_model,INFO,2022-06-10 21:05:48,"Finished testing"
__main__,random_int,INFO,2022-06-10 21:05:48,"Finished random_int test"
__main__,random_int,INFO,2022-06-10 21:05:48,"Started random_int test with filetype parquet and a maximum of 100,000,000 rows (small_table=True, 70% nuniques)"
testing.test_ml,generate_random_int_dataframe,DEBUG,2022-06-10 21:05:49,"Generating random_int table with 100 rows and 10 columns (70% nuniques)"
testing.test_ml,generate_random_int_dataframe,DEBUG,2022-06-10 21:05:49,"Generating random_int table with 1,000 rows and 10 columns (70% nuniques)"
testing.test_ml,generate_random_int_dataframe,DEBUG,2022-06-10 21:05:49,"Generating random_int table with 10,000 rows and 10 columns (70% nuniques)"
testing.test_ml,generate_random_int_dataframe,DEBUG,2022-06-10 21:05:49,"Generating random_int table with 100,000 rows and 10 columns (70% nuniques)"
testing.test_ml,generate_random_int_dataframe,DEBUG,2022-06-10 21:05:49,"Generating random_int table with 1,000,000 rows and 10 columns (70% nuniques)"
testing.test_ml,generate_random_int_dataframe,DEBUG,2022-06-10 21:05:52,"Generating random_int table with 5,000,000 rows and 10 columns (70% nuniques)"
testing.test_ml,generate_random_int_dataframe,DEBUG,2022-06-10 21:06:09,"Generating random_int table with 10,000,000 rows and 10 columns (70% nuniques)"
testing.test_ml,generate_random_int_dataframe,DEBUG,2022-06-10 21:06:43,"Generating random_int table with 50,000,000 rows and 10 columns (70% nuniques)"
testing.test_ml,generate_random_int_dataframe,DEBUG,2022-06-10 21:09:36,"Generating random_int table with 100,000,000 rows and 10 columns (70% nuniques)"
testing.test_ml,test_model,INFO,2022-06-10 21:15:10,"Started testing of a model with 5 rows"
testing.test_ml,test_model,DEBUG,2022-06-10 21:15:12,"Model on table 1 (100-10.parquet)"
algorithms.machine_learning,find_unique_columns,DEBUG,2022-06-10 21:15:13,"Preparation: 0.01229819655418396s, prediction: 0.88704639300704s"
testing.test_ml,test_model,DEBUG,2022-06-10 21:15:13,"Model on table 2 (1000-10.parquet)"
algorithms.machine_learning,find_unique_columns,DEBUG,2022-06-10 21:15:14,"Preparation: 0.011962618678808212s, prediction: 0.8929901719093323s"
testing.test_ml,test_model,DEBUG,2022-06-10 21:15:14,"Model on table 3 (10000-10.parquet)"
algorithms.machine_learning,find_unique_columns,DEBUG,2022-06-10 21:15:15,"Preparation: 0.012196175754070282s, prediction: 0.9042741432785988s"
testing.test_ml,test_model,DEBUG,2022-06-10 21:15:15,"Model on table 4 (100000-10.parquet)"
algorithms.machine_learning,find_unique_columns,DEBUG,2022-06-10 21:15:16,"Preparation: 0.012256886810064316s, prediction: 0.8889817297458649s"
testing.test_ml,test_model,DEBUG,2022-06-10 21:15:16,"Model on table 5 (1000000-10.parquet)"
algorithms.machine_learning,find_unique_columns,DEBUG,2022-06-10 21:15:17,"Preparation: 0.012279089540243149s, prediction: 0.890394564718008s"
testing.test_ml,test_model,DEBUG,2022-06-10 21:15:18,"Model on table 6 (10000000-10.parquet)"
algorithms.machine_learning,find_unique_columns,DEBUG,2022-06-10 21:15:20,"Preparation: 0.012315448373556137s, prediction: 0.8914288282394409s"
testing.test_ml,test_model,DEBUG,2022-06-10 21:15:39,"Model on table 7 (100000000-10.parquet)"
algorithms.machine_learning,find_unique_columns,DEBUG,2022-06-10 21:15:41,"Preparation: 0.01223885640501976s, prediction: 0.8885236941277981s"
testing.test_ml,test_model,DEBUG,2022-06-10 21:20:00,"Model on table 8 (5000000-10.parquet)"
algorithms.machine_learning,find_unique_columns,DEBUG,2022-06-10 21:20:01,"Preparation: 0.012311898171901703s, prediction: 0.8903673626482487s"
testing.test_ml,test_model,DEBUG,2022-06-10 21:20:10,"Model on table 9 (50000000-10.parquet)"
algorithms.machine_learning,find_unique_columns,DEBUG,2022-06-10 21:20:12,"Preparation: 0.012191295623779297s, prediction: 0.8904550075531006s"
testing.test_ml,test_model,DEBUG,2022-06-10 21:22:08,"Naive algorithm on table 1 (100-10.parquet)"
testing.test_ml,test_model,DEBUG,2022-06-10 21:22:08,"Naive algorithm on table 2 (1000-10.parquet)"
testing.test_ml,test_model,DEBUG,2022-06-10 21:22:08,"Naive algorithm on table 3 (10000-10.parquet)"
testing.test_ml,test_model,DEBUG,2022-06-10 21:22:08,"Naive algorithm on table 4 (100000-10.parquet)"
testing.test_ml,test_model,DEBUG,2022-06-10 21:22:08,"Naive algorithm on table 5 (1000000-10.parquet)"
testing.test_ml,test_model,DEBUG,2022-06-10 21:22:13,"Naive algorithm on table 6 (10000000-10.parquet)"
testing.test_ml,test_model,DEBUG,2022-06-10 21:23:16,"Naive algorithm on table 7 (100000000-10.parquet)"
testing.test_ml,test_model,DEBUG,2022-06-10 21:37:38,"Naive algorithm on table 8 (5000000-10.parquet)"
testing.test_ml,test_model,DEBUG,2022-06-10 21:38:07,"Naive algorithm on table 9 (50000000-10.parquet)"
testing.test_ml,test_model,INFO,2022-06-10 21:44:31,"Finished testing"
__main__,random_int,INFO,2022-06-10 21:44:31,"Finished random_int test"
__main__,random_int,INFO,2022-06-10 21:44:31,"Started random_int test with filetype parquet and a maximum of 100,000,000 rows (small_table=False, 70% nuniques)"
testing.test_ml,test_model,INFO,2022-06-10 21:44:31,"Started testing of a model with 5 rows"
testing.test_ml,test_model,DEBUG,2022-06-10 21:44:33,"Model on table 1 (100-10.parquet)"
algorithms.machine_learning,find_unique_columns,DEBUG,2022-06-10 21:44:34,"Preparation: 0.012289509177207947s, prediction: 0.8851427435874939s"
testing.test_ml,test_model,DEBUG,2022-06-10 21:44:34,"Model on table 2 (1000-10.parquet)"
algorithms.machine_learning,find_unique_columns,DEBUG,2022-06-10 21:44:35,"Preparation: 0.01216602697968483s, prediction: 0.8836661539971828s"
testing.test_ml,test_model,DEBUG,2022-06-10 21:44:35,"Model on table 3 (10000-10.parquet)"
algorithms.machine_learning,find_unique_columns,DEBUG,2022-06-10 21:44:36,"Preparation: 0.012380287051200867s, prediction: 0.886604767292738s"
testing.test_ml,test_model,DEBUG,2022-06-10 21:44:36,"Model on table 4 (100000-10.parquet)"
algorithms.machine_learning,find_unique_columns,DEBUG,2022-06-10 21:44:37,"Preparation: 0.012393336743116379s, prediction: 0.8855882585048676s"
testing.test_ml,test_model,DEBUG,2022-06-10 21:44:37,"Model on table 5 (1000000-10.parquet)"
algorithms.machine_learning,find_unique_columns,DEBUG,2022-06-10 21:44:38,"Preparation: 0.012705221772193909s, prediction: 0.8872562497854233s"
testing.test_ml,test_model,DEBUG,2022-06-10 21:44:39,"Model on table 6 (10000000-10.parquet)"
algorithms.machine_learning,find_unique_columns,DEBUG,2022-06-10 21:44:40,"Preparation: 0.012521084398031235s, prediction: 0.8848423026502132s"
testing.test_ml,test_model,DEBUG,2022-06-10 21:44:59,"Model on table 7 (100000000-10.parquet)"
algorithms.machine_learning,find_unique_columns,DEBUG,2022-06-10 21:45:05,"Preparation: 0.012828446924686432s, prediction: 0.8868817612528801s"
testing.test_ml,test_model,DEBUG,2022-06-10 21:49:23,"Model on table 8 (5000000-10.parquet)"
algorithms.machine_learning,find_unique_columns,DEBUG,2022-06-10 21:49:24,"Preparation: 0.012642763555049896s, prediction: 0.8881565295159817s"
testing.test_ml,test_model,DEBUG,2022-06-10 21:49:33,"Model on table 9 (50000000-10.parquet)"
algorithms.machine_learning,find_unique_columns,DEBUG,2022-06-10 21:49:36,"Preparation: 0.012873385101556778s, prediction: 0.8872183859348297s"
testing.test_ml,test_model,DEBUG,2022-06-10 21:51:31,"Naive algorithm on table 1 (100-10.parquet)"
testing.test_ml,test_model,DEBUG,2022-06-10 21:51:31,"Naive algorithm on table 2 (1000-10.parquet)"
testing.test_ml,test_model,DEBUG,2022-06-10 21:51:31,"Naive algorithm on table 3 (10000-10.parquet)"
testing.test_ml,test_model,DEBUG,2022-06-10 21:51:31,"Naive algorithm on table 4 (100000-10.parquet)"
testing.test_ml,test_model,DEBUG,2022-06-10 21:51:31,"Naive algorithm on table 5 (1000000-10.parquet)"
testing.test_ml,test_model,DEBUG,2022-06-10 21:51:36,"Naive algorithm on table 6 (10000000-10.parquet)"
testing.test_ml,test_model,DEBUG,2022-06-10 21:52:40,"Naive algorithm on table 7 (100000000-10.parquet)"
testing.test_ml,test_model,DEBUG,2022-06-10 22:07:06,"Naive algorithm on table 8 (5000000-10.parquet)"
testing.test_ml,test_model,DEBUG,2022-06-10 22:07:35,"Naive algorithm on table 9 (50000000-10.parquet)"
testing.test_ml,test_model,INFO,2022-06-10 22:14:00,"Finished testing"
__main__,random_int,INFO,2022-06-10 22:14:00,"Finished random_int test"
__main__,random_int,INFO,2022-06-10 22:14:00,"Started random_int test with filetype csv and a maximum of 100,000,000 rows (small_table=False, 70% nuniques)"
testing.test_ml,generate_random_int_dataframe,DEBUG,2022-06-10 22:14:00,"Generating random_int table with 100 rows and 10 columns (70% nuniques)"
testing.test_ml,generate_random_int_dataframe,DEBUG,2022-06-10 22:14:00,"Generating random_int table with 1,000 rows and 10 columns (70% nuniques)"
testing.test_ml,generate_random_int_dataframe,DEBUG,2022-06-10 22:14:00,"Generating random_int table with 10,000 rows and 10 columns (70% nuniques)"
testing.test_ml,generate_random_int_dataframe,DEBUG,2022-06-10 22:14:00,"Generating random_int table with 100,000 rows and 10 columns (70% nuniques)"
testing.test_ml,generate_random_int_dataframe,DEBUG,2022-06-10 22:14:00,"Generating random_int table with 1,000,000 rows and 10 columns (70% nuniques)"
testing.test_ml,generate_random_int_dataframe,DEBUG,2022-06-10 22:14:05,"Generating random_int table with 5,000,000 rows and 10 columns (70% nuniques)"
testing.test_ml,generate_random_int_dataframe,DEBUG,2022-06-10 22:14:33,"Generating random_int table with 10,000,000 rows and 10 columns (70% nuniques)"
testing.test_ml,generate_random_int_dataframe,DEBUG,2022-06-10 22:15:30,"Generating random_int table with 50,000,000 rows and 10 columns (70% nuniques)"
testing.test_ml,generate_random_int_dataframe,DEBUG,2022-06-10 22:20:22,"Generating random_int table with 100,000,000 rows and 10 columns (70% nuniques)"
testing.test_ml,test_model,INFO,2022-06-10 22:30:01,"Started testing of a model with 5 rows"
testing.test_ml,test_model,DEBUG,2022-06-10 22:30:03,"Model on table 1 (100-10.csv)"
algorithms.machine_learning,find_unique_columns,DEBUG,2022-06-10 22:30:04,"Preparation: 0.012094426900148392s, prediction: 0.8896748013794422s"
testing.test_ml,test_model,DEBUG,2022-06-10 22:30:04,"Model on table 2 (1000-10.csv)"
algorithms.machine_learning,find_unique_columns,DEBUG,2022-06-10 22:30:05,"Preparation: 0.012129068374633789s, prediction: 0.8935802616178989s"
testing.test_ml,test_model,DEBUG,2022-06-10 22:30:05,"Model on table 3 (10000-10.csv)"
algorithms.machine_learning,find_unique_columns,DEBUG,2022-06-10 22:30:06,"Preparation: 0.012190058827400208s, prediction: 0.8893098048865795s"
testing.test_ml,test_model,DEBUG,2022-06-10 22:30:06,"Model on table 4 (100000-10.csv)"
algorithms.machine_learning,find_unique_columns,DEBUG,2022-06-10 22:30:07,"Preparation: 0.012510325759649277s, prediction: 0.8908653520047665s"
testing.test_ml,test_model,DEBUG,2022-06-10 22:30:07,"Model on table 5 (1000000-10.csv)"
algorithms.machine_learning,find_unique_columns,DEBUG,2022-06-10 22:30:08,"Preparation: 0.012617744505405426s, prediction: 0.8893818520009518s"
testing.test_ml,test_model,DEBUG,2022-06-10 22:30:09,"Model on table 6 (10000000-10.csv)"
algorithms.machine_learning,find_unique_columns,DEBUG,2022-06-10 22:30:15,"Preparation: 0.012798149138689041s, prediction: 0.894580889493227s"
testing.test_ml,test_model,DEBUG,2022-06-10 22:30:34,"Model on table 7 (100000000-10.csv)"
algorithms.machine_learning,find_unique_columns,DEBUG,2022-06-10 22:31:29,"Preparation: 0.012798361480236053s, prediction: 0.8894271515309811s"
testing.test_ml,test_model,DEBUG,2022-06-10 22:35:45,"Model on table 8 (5000000-10.csv)"
algorithms.machine_learning,find_unique_columns,DEBUG,2022-06-10 22:35:48,"Preparation: 0.012622196227312088s, prediction: 0.8829588368535042s"
testing.test_ml,test_model,DEBUG,2022-06-10 22:35:57,"Model on table 9 (50000000-10.csv)"
algorithms.machine_learning,find_unique_columns,DEBUG,2022-06-10 22:36:26,"Preparation: 0.01255091279745102s, prediction: 0.8817735053598881s"
testing.test_ml,test_model,DEBUG,2022-06-10 22:38:19,"Naive algorithm on table 1 (100-10.csv)"
testing.test_ml,test_model,DEBUG,2022-06-10 22:38:19,"Naive algorithm on table 2 (1000-10.csv)"
testing.test_ml,test_model,DEBUG,2022-06-10 22:38:19,"Naive algorithm on table 3 (10000-10.csv)"
testing.test_ml,test_model,DEBUG,2022-06-10 22:38:19,"Naive algorithm on table 4 (100000-10.csv)"
testing.test_ml,test_model,DEBUG,2022-06-10 22:38:19,"Naive algorithm on table 5 (1000000-10.csv)"
testing.test_ml,test_model,DEBUG,2022-06-10 22:38:24,"Naive algorithm on table 6 (10000000-10.csv)"
testing.test_ml,test_model,DEBUG,2022-06-10 22:39:32,"Naive algorithm on table 7 (100000000-10.csv)"
testing.test_ml,test_model,DEBUG,2022-06-10 22:54:37,"Naive algorithm on table 8 (5000000-10.csv)"
testing.test_ml,test_model,DEBUG,2022-06-10 22:55:09,"Naive algorithm on table 9 (50000000-10.csv)"
testing.test_ml,test_model,INFO,2022-06-10 23:01:59,"Finished testing"
__main__,random_int,INFO,2022-06-10 23:01:59,"Finished random_int test"
__main__,random_int,INFO,2022-06-10 23:01:59,"Started random_int test with filetype parquet and a maximum of 100,000,000 rows (small_table=True, 80% nuniques)"
testing.test_ml,generate_random_int_dataframe,DEBUG,2022-06-10 23:01:59,"Generating random_int table with 100 rows and 10 columns (80% nuniques)"
testing.test_ml,generate_random_int_dataframe,DEBUG,2022-06-10 23:01:59,"Generating random_int table with 1,000 rows and 10 columns (80% nuniques)"
testing.test_ml,generate_random_int_dataframe,DEBUG,2022-06-10 23:01:59,"Generating random_int table with 10,000 rows and 10 columns (80% nuniques)"
testing.test_ml,generate_random_int_dataframe,DEBUG,2022-06-10 23:01:59,"Generating random_int table with 100,000 rows and 10 columns (80% nuniques)"
testing.test_ml,generate_random_int_dataframe,DEBUG,2022-06-10 23:01:59,"Generating random_int table with 1,000,000 rows and 10 columns (80% nuniques)"
testing.test_ml,generate_random_int_dataframe,DEBUG,2022-06-10 23:02:02,"Generating random_int table with 5,000,000 rows and 10 columns (80% nuniques)"
testing.test_ml,generate_random_int_dataframe,DEBUG,2022-06-10 23:02:17,"Generating random_int table with 10,000,000 rows and 10 columns (80% nuniques)"
testing.test_ml,generate_random_int_dataframe,DEBUG,2022-06-10 23:02:52,"Generating random_int table with 50,000,000 rows and 10 columns (80% nuniques)"
testing.test_ml,generate_random_int_dataframe,DEBUG,2022-06-10 23:05:42,"Generating random_int table with 100,000,000 rows and 10 columns (80% nuniques)"
testing.test_ml,test_model,INFO,2022-06-10 23:11:21,"Started testing of a model with 5 rows"
testing.test_ml,test_model,DEBUG,2022-06-10 23:11:23,"Model on table 1 (100-10.parquet)"
algorithms.machine_learning,find_unique_columns,DEBUG,2022-06-10 23:11:24,"Preparation: 0.011140074580907822s, prediction: 0.8805985152721405s"
testing.test_ml,test_model,DEBUG,2022-06-10 23:11:24,"Model on table 2 (1000-10.parquet)"
algorithms.machine_learning,find_unique_columns,DEBUG,2022-06-10 23:11:25,"Preparation: 0.010910622775554657s, prediction: 0.8800865970551968s"
testing.test_ml,test_model,DEBUG,2022-06-10 23:11:25,"Model on table 3 (10000-10.parquet)"
algorithms.machine_learning,find_unique_columns,DEBUG,2022-06-10 23:11:26,"Preparation: 0.0108749158680439s, prediction: 0.8965679444372654s"
testing.test_ml,test_model,DEBUG,2022-06-10 23:11:26,"Model on table 4 (100000-10.parquet)"
algorithms.machine_learning,find_unique_columns,DEBUG,2022-06-10 23:11:27,"Preparation: 0.011110205203294754s, prediction: 0.8833948001265526s"
testing.test_ml,test_model,DEBUG,2022-06-10 23:11:27,"Model on table 5 (1000000-10.parquet)"
algorithms.machine_learning,find_unique_columns,DEBUG,2022-06-10 23:11:28,"Preparation: 0.011444434523582458s, prediction: 0.884894922375679s"
testing.test_ml,test_model,DEBUG,2022-06-10 23:11:28,"Model on table 6 (10000000-10.parquet)"
algorithms.machine_learning,find_unique_columns,DEBUG,2022-06-10 23:11:30,"Preparation: 0.011199060827493668s, prediction: 0.8835192583501339s"
testing.test_ml,test_model,DEBUG,2022-06-10 23:11:42,"Model on table 7 (100000000-10.parquet)"
algorithms.machine_learning,find_unique_columns,DEBUG,2022-06-10 23:11:45,"Preparation: 0.011148542165756226s, prediction: 0.8846034444868565s"
testing.test_ml,test_model,DEBUG,2022-06-10 23:14:38,"Model on table 8 (5000000-10.parquet)"
algorithms.machine_learning,find_unique_columns,DEBUG,2022-06-10 23:14:39,"Preparation: 0.011431623250246048s, prediction: 0.8860725909471512s"
testing.test_ml,test_model,DEBUG,2022-06-10 23:14:45,"Model on table 9 (50000000-10.parquet)"
algorithms.machine_learning,find_unique_columns,DEBUG,2022-06-10 23:14:47,"Preparation: 0.011286832392215729s, prediction: 0.8848074451088905s"
testing.test_ml,test_model,DEBUG,2022-06-10 23:16:05,"Naive algorithm on table 1 (100-10.parquet)"
testing.test_ml,test_model,DEBUG,2022-06-10 23:16:05,"Naive algorithm on table 2 (1000-10.parquet)"
testing.test_ml,test_model,DEBUG,2022-06-10 23:16:05,"Naive algorithm on table 3 (10000-10.parquet)"
testing.test_ml,test_model,DEBUG,2022-06-10 23:16:05,"Naive algorithm on table 4 (100000-10.parquet)"
testing.test_ml,test_model,DEBUG,2022-06-10 23:16:05,"Naive algorithm on table 5 (1000000-10.parquet)"
testing.test_ml,test_model,DEBUG,2022-06-10 23:16:10,"Naive algorithm on table 6 (10000000-10.parquet)"
testing.test_ml,test_model,DEBUG,2022-06-10 23:17:13,"Naive algorithm on table 7 (100000000-10.parquet)"
testing.test_ml,test_model,DEBUG,2022-06-10 23:31:35,"Naive algorithm on table 8 (5000000-10.parquet)"
testing.test_ml,test_model,DEBUG,2022-06-10 23:32:04,"Naive algorithm on table 9 (50000000-10.parquet)"
testing.test_ml,test_model,INFO,2022-06-10 23:38:28,"Finished testing"
__main__,random_int,INFO,2022-06-10 23:38:28,"Finished random_int test"
__main__,random_int,INFO,2022-06-10 23:38:28,"Started random_int test with filetype parquet and a maximum of 100,000,000 rows (small_table=False, 80% nuniques)"
testing.test_ml,test_model,INFO,2022-06-10 23:38:28,"Started testing of a model with 5 rows"
testing.test_ml,test_model,DEBUG,2022-06-10 23:38:30,"Model on table 1 (100-10.parquet)"
algorithms.machine_learning,find_unique_columns,DEBUG,2022-06-10 23:38:31,"Preparation: 0.011230375617742538s, prediction: 0.8766504861414433s"
testing.test_ml,test_model,DEBUG,2022-06-10 23:38:31,"Model on table 2 (1000-10.parquet)"
algorithms.machine_learning,find_unique_columns,DEBUG,2022-06-10 23:38:31,"Preparation: 0.010747812688350677s, prediction: 0.8771353662014008s"
testing.test_ml,test_model,DEBUG,2022-06-10 23:38:31,"Model on table 3 (10000-10.parquet)"
algorithms.machine_learning,find_unique_columns,DEBUG,2022-06-10 23:38:32,"Preparation: 0.010921835899353027s, prediction: 0.8766399696469307s"
testing.test_ml,test_model,DEBUG,2022-06-10 23:38:32,"Model on table 4 (100000-10.parquet)"
algorithms.machine_learning,find_unique_columns,DEBUG,2022-06-10 23:38:33,"Preparation: 0.010917328298091888s, prediction: 0.8774427957832813s"
testing.test_ml,test_model,DEBUG,2022-06-10 23:38:33,"Model on table 5 (1000000-10.parquet)"
algorithms.machine_learning,find_unique_columns,DEBUG,2022-06-10 23:38:34,"Preparation: 0.011571120470762253s, prediction: 0.876958791166544s"
testing.test_ml,test_model,DEBUG,2022-06-10 23:38:35,"Model on table 6 (10000000-10.parquet)"
algorithms.machine_learning,find_unique_columns,DEBUG,2022-06-10 23:38:36,"Preparation: 0.011286653578281403s, prediction: 0.8756711930036545s"
testing.test_ml,test_model,DEBUG,2022-06-10 23:38:49,"Model on table 7 (100000000-10.parquet)"
algorithms.machine_learning,find_unique_columns,DEBUG,2022-06-10 23:38:54,"Preparation: 0.011630889028310776s, prediction: 0.8748140186071396s"
testing.test_ml,test_model,DEBUG,2022-06-10 23:41:48,"Model on table 8 (5000000-10.parquet)"
algorithms.machine_learning,find_unique_columns,DEBUG,2022-06-10 23:41:49,"Preparation: 0.01196194812655449s, prediction: 0.8877552337944508s"
testing.test_ml,test_model,DEBUG,2022-06-10 23:41:55,"Model on table 9 (50000000-10.parquet)"
algorithms.machine_learning,find_unique_columns,DEBUG,2022-06-10 23:41:58,"Preparation: 0.011848561465740204s, prediction: 0.8782776594161987s"
testing.test_ml,test_model,DEBUG,2022-06-10 23:43:14,"Naive algorithm on table 1 (100-10.parquet)"
testing.test_ml,test_model,DEBUG,2022-06-10 23:43:14,"Naive algorithm on table 2 (1000-10.parquet)"
testing.test_ml,test_model,DEBUG,2022-06-10 23:43:14,"Naive algorithm on table 3 (10000-10.parquet)"
testing.test_ml,test_model,DEBUG,2022-06-10 23:43:14,"Naive algorithm on table 4 (100000-10.parquet)"
testing.test_ml,test_model,DEBUG,2022-06-10 23:43:14,"Naive algorithm on table 5 (1000000-10.parquet)"
testing.test_ml,test_model,DEBUG,2022-06-10 23:43:19,"Naive algorithm on table 6 (10000000-10.parquet)"
testing.test_ml,test_model,DEBUG,2022-06-10 23:44:22,"Naive algorithm on table 7 (100000000-10.parquet)"
testing.test_ml,test_model,DEBUG,2022-06-10 23:58:45,"Naive algorithm on table 8 (5000000-10.parquet)"
testing.test_ml,test_model,DEBUG,2022-06-10 23:59:14,"Naive algorithm on table 9 (50000000-10.parquet)"
testing.test_ml,test_model,INFO,2022-06-11 00:05:34,"Finished testing"
__main__,random_int,INFO,2022-06-11 00:05:34,"Finished random_int test"
__main__,random_int,INFO,2022-06-11 00:05:34,"Started random_int test with filetype csv and a maximum of 100,000,000 rows (small_table=False, 80% nuniques)"
testing.test_ml,generate_random_int_dataframe,DEBUG,2022-06-11 00:05:34,"Generating random_int table with 100 rows and 10 columns (80% nuniques)"
testing.test_ml,generate_random_int_dataframe,DEBUG,2022-06-11 00:05:34,"Generating random_int table with 1,000 rows and 10 columns (80% nuniques)"
testing.test_ml,generate_random_int_dataframe,DEBUG,2022-06-11 00:05:34,"Generating random_int table with 10,000 rows and 10 columns (80% nuniques)"
testing.test_ml,generate_random_int_dataframe,DEBUG,2022-06-11 00:05:34,"Generating random_int table with 100,000 rows and 10 columns (80% nuniques)"
testing.test_ml,generate_random_int_dataframe,DEBUG,2022-06-11 00:05:35,"Generating random_int table with 1,000,000 rows and 10 columns (80% nuniques)"
testing.test_ml,generate_random_int_dataframe,DEBUG,2022-06-11 00:05:39,"Generating random_int table with 5,000,000 rows and 10 columns (80% nuniques)"
testing.test_ml,generate_random_int_dataframe,DEBUG,2022-06-11 00:06:04,"Generating random_int table with 10,000,000 rows and 10 columns (80% nuniques)"
testing.test_ml,generate_random_int_dataframe,DEBUG,2022-06-11 00:07:00,"Generating random_int table with 50,000,000 rows and 10 columns (80% nuniques)"
testing.test_ml,generate_random_int_dataframe,DEBUG,2022-06-11 00:11:48,"Generating random_int table with 100,000,000 rows and 10 columns (80% nuniques)"
testing.test_ml,test_model,INFO,2022-06-11 00:21:13,"Started testing of a model with 5 rows"
testing.test_ml,test_model,DEBUG,2022-06-11 00:21:14,"Model on table 1 (100-10.csv)"
algorithms.machine_learning,find_unique_columns,DEBUG,2022-06-11 00:21:15,"Preparation: 0.01099323108792305s, prediction: 0.8790274746716022s"
testing.test_ml,test_model,DEBUG,2022-06-11 00:21:15,"Model on table 2 (1000-10.csv)"
algorithms.machine_learning,find_unique_columns,DEBUG,2022-06-11 00:21:16,"Preparation: 0.010849352926015854s, prediction: 0.8787099905312061s"
testing.test_ml,test_model,DEBUG,2022-06-11 00:21:16,"Model on table 3 (10000-10.csv)"
algorithms.machine_learning,find_unique_columns,DEBUG,2022-06-11 00:21:17,"Preparation: 0.010839823633432388s, prediction: 0.8796717040240765s"
testing.test_ml,test_model,DEBUG,2022-06-11 00:21:17,"Model on table 4 (100000-10.csv)"
algorithms.machine_learning,find_unique_columns,DEBUG,2022-06-11 00:21:18,"Preparation: 0.011330660432577133s, prediction: 0.8802440613508224s"
testing.test_ml,test_model,DEBUG,2022-06-11 00:21:18,"Model on table 5 (1000000-10.csv)"
algorithms.machine_learning,find_unique_columns,DEBUG,2022-06-11 00:21:20,"Preparation: 0.011353328824043274s, prediction: 0.881198488175869s"
testing.test_ml,test_model,DEBUG,2022-06-11 00:21:20,"Model on table 6 (10000000-10.csv)"
algorithms.machine_learning,find_unique_columns,DEBUG,2022-06-11 00:21:26,"Preparation: 0.011582888662815094s, prediction: 0.8804766871035099s"
testing.test_ml,test_model,DEBUG,2022-06-11 00:21:39,"Model on table 7 (100000000-10.csv)"
algorithms.machine_learning,find_unique_columns,DEBUG,2022-06-11 00:22:33,"Preparation: 0.011693589389324188s, prediction: 0.8792026415467262s"
testing.test_ml,test_model,DEBUG,2022-06-11 00:25:23,"Model on table 8 (5000000-10.csv)"
algorithms.machine_learning,find_unique_columns,DEBUG,2022-06-11 00:25:27,"Preparation: 0.011753849685192108s, prediction: 0.8806949853897095s"
testing.test_ml,test_model,DEBUG,2022-06-11 00:25:32,"Model on table 9 (50000000-10.csv)"
algorithms.machine_learning,find_unique_columns,DEBUG,2022-06-11 00:26:01,"Preparation: 0.011602159589529037s, prediction: 0.8770658038556576s"
testing.test_ml,test_model,DEBUG,2022-06-11 00:27:17,"Naive algorithm on table 1 (100-10.csv)"
testing.test_ml,test_model,DEBUG,2022-06-11 00:27:17,"Naive algorithm on table 2 (1000-10.csv)"
testing.test_ml,test_model,DEBUG,2022-06-11 00:27:17,"Naive algorithm on table 3 (10000-10.csv)"
testing.test_ml,test_model,DEBUG,2022-06-11 00:27:17,"Naive algorithm on table 4 (100000-10.csv)"
testing.test_ml,test_model,DEBUG,2022-06-11 00:27:18,"Naive algorithm on table 5 (1000000-10.csv)"
testing.test_ml,test_model,DEBUG,2022-06-11 00:27:23,"Naive algorithm on table 6 (10000000-10.csv)"
testing.test_ml,test_model,DEBUG,2022-06-11 00:28:31,"Naive algorithm on table 7 (100000000-10.csv)"
testing.test_ml,test_model,DEBUG,2022-06-11 00:43:37,"Naive algorithm on table 8 (5000000-10.csv)"
testing.test_ml,test_model,DEBUG,2022-06-11 00:44:09,"Naive algorithm on table 9 (50000000-10.csv)"
testing.test_ml,test_model,INFO,2022-06-11 00:50:58,"Finished testing"
__main__,random_int,INFO,2022-06-11 00:50:58,"Finished random_int test"
__main__,random_int,INFO,2022-06-11 00:50:58,"Started random_int test with filetype parquet and a maximum of 100,000,000 rows (small_table=True, 90% nuniques)"
testing.test_ml,generate_random_int_dataframe,DEBUG,2022-06-11 00:50:59,"Generating random_int table with 100 rows and 10 columns (90% nuniques)"
testing.test_ml,generate_random_int_dataframe,DEBUG,2022-06-11 00:50:59,"Generating random_int table with 1,000 rows and 10 columns (90% nuniques)"
testing.test_ml,generate_random_int_dataframe,DEBUG,2022-06-11 00:50:59,"Generating random_int table with 10,000 rows and 10 columns (90% nuniques)"
testing.test_ml,generate_random_int_dataframe,DEBUG,2022-06-11 00:50:59,"Generating random_int table with 100,000 rows and 10 columns (90% nuniques)"
testing.test_ml,generate_random_int_dataframe,DEBUG,2022-06-11 00:50:59,"Generating random_int table with 1,000,000 rows and 10 columns (90% nuniques)"
testing.test_ml,generate_random_int_dataframe,DEBUG,2022-06-11 00:51:02,"Generating random_int table with 5,000,000 rows and 10 columns (90% nuniques)"
testing.test_ml,generate_random_int_dataframe,DEBUG,2022-06-11 00:51:15,"Generating random_int table with 10,000,000 rows and 10 columns (90% nuniques)"
testing.test_ml,generate_random_int_dataframe,DEBUG,2022-06-11 00:51:49,"Generating random_int table with 50,000,000 rows and 10 columns (90% nuniques)"
testing.test_ml,generate_random_int_dataframe,DEBUG,2022-06-11 00:54:37,"Generating random_int table with 100,000,000 rows and 10 columns (90% nuniques)"
testing.test_ml,test_model,INFO,2022-06-11 01:00:09,"Started testing of a model with 5 rows"
testing.test_ml,test_model,DEBUG,2022-06-11 01:00:11,"Model on table 1 (100-10.parquet)"
algorithms.machine_learning,find_unique_columns,DEBUG,2022-06-11 01:00:12,"Preparation: 0.010282035917043686s, prediction: 0.9119993261992931s"
testing.test_ml,test_model,DEBUG,2022-06-11 01:00:12,"Model on table 2 (1000-10.parquet)"
algorithms.machine_learning,find_unique_columns,DEBUG,2022-06-11 01:00:13,"Preparation: 0.009823620319366455s, prediction: 0.8827903531491756s"
testing.test_ml,test_model,DEBUG,2022-06-11 01:00:13,"Model on table 3 (10000-10.parquet)"
algorithms.machine_learning,find_unique_columns,DEBUG,2022-06-11 01:00:14,"Preparation: 0.00988999754190445s, prediction: 0.881550133228302s"
testing.test_ml,test_model,DEBUG,2022-06-11 01:00:14,"Model on table 4 (100000-10.parquet)"
algorithms.machine_learning,find_unique_columns,DEBUG,2022-06-11 01:00:14,"Preparation: 0.010086607187986374s, prediction: 0.8807155527174473s"
testing.test_ml,test_model,DEBUG,2022-06-11 01:00:15,"Model on table 5 (1000000-10.parquet)"
algorithms.machine_learning,find_unique_columns,DEBUG,2022-06-11 01:00:15,"Preparation: 0.01015527918934822s, prediction: 0.8812907598912716s"
testing.test_ml,test_model,DEBUG,2022-06-11 01:00:16,"Model on table 6 (10000000-10.parquet)"
algorithms.machine_learning,find_unique_columns,DEBUG,2022-06-11 01:00:17,"Preparation: 0.010753702372312546s, prediction: 0.8828098922967911s"
testing.test_ml,test_model,DEBUG,2022-06-11 01:00:24,"Model on table 7 (100000000-10.parquet)"
algorithms.machine_learning,find_unique_columns,DEBUG,2022-06-11 01:00:26,"Preparation: 0.010051678866147995s, prediction: 0.8813392855226994s"
testing.test_ml,test_model,DEBUG,2022-06-11 01:01:54,"Model on table 8 (5000000-10.parquet)"
algorithms.machine_learning,find_unique_columns,DEBUG,2022-06-11 01:01:55,"Preparation: 0.010029051452875137s, prediction: 0.8801103010773659s"
testing.test_ml,test_model,DEBUG,2022-06-11 01:01:57,"Model on table 9 (50000000-10.parquet)"
algorithms.machine_learning,find_unique_columns,DEBUG,2022-06-11 01:02:00,"Preparation: 0.010862603783607483s, prediction: 0.8817073926329613s"
testing.test_ml,test_model,DEBUG,2022-06-11 01:02:39,"Naive algorithm on table 1 (100-10.parquet)"
testing.test_ml,test_model,DEBUG,2022-06-11 01:02:39,"Naive algorithm on table 2 (1000-10.parquet)"
testing.test_ml,test_model,DEBUG,2022-06-11 01:02:39,"Naive algorithm on table 3 (10000-10.parquet)"
testing.test_ml,test_model,DEBUG,2022-06-11 01:02:39,"Naive algorithm on table 4 (100000-10.parquet)"
testing.test_ml,test_model,DEBUG,2022-06-11 01:02:39,"Naive algorithm on table 5 (1000000-10.parquet)"
testing.test_ml,test_model,DEBUG,2022-06-11 01:02:44,"Naive algorithm on table 6 (10000000-10.parquet)"
testing.test_ml,test_model,DEBUG,2022-06-11 01:03:47,"Naive algorithm on table 7 (100000000-10.parquet)"
testing.test_ml,test_model,DEBUG,2022-06-11 01:18:07,"Naive algorithm on table 8 (5000000-10.parquet)"
testing.test_ml,test_model,DEBUG,2022-06-11 01:18:36,"Naive algorithm on table 9 (50000000-10.parquet)"
testing.test_ml,test_model,INFO,2022-06-11 01:24:57,"Finished testing"
__main__,random_int,INFO,2022-06-11 01:24:57,"Finished random_int test"
__main__,random_int,INFO,2022-06-11 01:24:57,"Started random_int test with filetype parquet and a maximum of 100,000,000 rows (small_table=False, 90% nuniques)"
testing.test_ml,test_model,INFO,2022-06-11 01:24:57,"Started testing of a model with 5 rows"
testing.test_ml,test_model,DEBUG,2022-06-11 01:24:59,"Model on table 1 (100-10.parquet)"
algorithms.machine_learning,find_unique_columns,DEBUG,2022-06-11 01:25:00,"Preparation: 0.009924046695232391s, prediction: 0.8767936080694199s"
testing.test_ml,test_model,DEBUG,2022-06-11 01:25:00,"Model on table 2 (1000-10.parquet)"
algorithms.machine_learning,find_unique_columns,DEBUG,2022-06-11 01:25:01,"Preparation: 0.009686287492513657s, prediction: 0.8808323442935944s"
testing.test_ml,test_model,DEBUG,2022-06-11 01:25:01,"Model on table 3 (10000-10.parquet)"
algorithms.machine_learning,find_unique_columns,DEBUG,2022-06-11 01:25:02,"Preparation: 0.00999564677476883s, prediction: 0.8778672739863396s"
testing.test_ml,test_model,DEBUG,2022-06-11 01:25:02,"Model on table 4 (100000-10.parquet)"
algorithms.machine_learning,find_unique_columns,DEBUG,2022-06-11 01:25:03,"Preparation: 0.010279867798089981s, prediction: 0.880556657910347s"
testing.test_ml,test_model,DEBUG,2022-06-11 01:25:03,"Model on table 5 (1000000-10.parquet)"
algorithms.machine_learning,find_unique_columns,DEBUG,2022-06-11 01:25:04,"Preparation: 0.010800674557685852s, prediction: 0.879281785339117s"
testing.test_ml,test_model,DEBUG,2022-06-11 01:25:04,"Model on table 6 (10000000-10.parquet)"
algorithms.machine_learning,find_unique_columns,DEBUG,2022-06-11 01:25:06,"Preparation: 0.01034456491470337s, prediction: 0.8791420832276344s"
testing.test_ml,test_model,DEBUG,2022-06-11 01:25:12,"Model on table 7 (100000000-10.parquet)"
algorithms.machine_learning,find_unique_columns,DEBUG,2022-06-11 01:25:18,"Preparation: 0.01060439646244049s, prediction: 0.8811172060668468s"
testing.test_ml,test_model,DEBUG,2022-06-11 01:26:44,"Model on table 8 (5000000-10.parquet)"
algorithms.machine_learning,find_unique_columns,DEBUG,2022-06-11 01:26:45,"Preparation: 0.010457322001457214s, prediction: 0.8801697082817554s"
testing.test_ml,test_model,DEBUG,2022-06-11 01:26:48,"Model on table 9 (50000000-10.parquet)"
algorithms.machine_learning,find_unique_columns,DEBUG,2022-06-11 01:26:51,"Preparation: 0.010447923094034195s, prediction: 0.886507336050272s"
testing.test_ml,test_model,DEBUG,2022-06-11 01:27:29,"Naive algorithm on table 1 (100-10.parquet)"
testing.test_ml,test_model,DEBUG,2022-06-11 01:27:29,"Naive algorithm on table 2 (1000-10.parquet)"
testing.test_ml,test_model,DEBUG,2022-06-11 01:27:29,"Naive algorithm on table 3 (10000-10.parquet)"
testing.test_ml,test_model,DEBUG,2022-06-11 01:27:29,"Naive algorithm on table 4 (100000-10.parquet)"
testing.test_ml,test_model,DEBUG,2022-06-11 01:27:29,"Naive algorithm on table 5 (1000000-10.parquet)"
testing.test_ml,test_model,DEBUG,2022-06-11 01:27:34,"Naive algorithm on table 6 (10000000-10.parquet)"
testing.test_ml,test_model,DEBUG,2022-06-11 01:28:37,"Naive algorithm on table 7 (100000000-10.parquet)"
testing.test_ml,test_model,DEBUG,2022-06-11 01:43:03,"Naive algorithm on table 8 (5000000-10.parquet)"
testing.test_ml,test_model,DEBUG,2022-06-11 01:43:32,"Naive algorithm on table 9 (50000000-10.parquet)"
testing.test_ml,test_model,INFO,2022-06-11 01:49:55,"Finished testing"
__main__,random_int,INFO,2022-06-11 01:49:55,"Finished random_int test"
__main__,random_int,INFO,2022-06-11 01:49:55,"Started random_int test with filetype csv and a maximum of 100,000,000 rows (small_table=False, 90% nuniques)"
testing.test_ml,generate_random_int_dataframe,DEBUG,2022-06-11 01:49:55,"Generating random_int table with 100 rows and 10 columns (90% nuniques)"
testing.test_ml,generate_random_int_dataframe,DEBUG,2022-06-11 01:49:55,"Generating random_int table with 1,000 rows and 10 columns (90% nuniques)"
testing.test_ml,generate_random_int_dataframe,DEBUG,2022-06-11 01:49:55,"Generating random_int table with 10,000 rows and 10 columns (90% nuniques)"
testing.test_ml,generate_random_int_dataframe,DEBUG,2022-06-11 01:49:55,"Generating random_int table with 100,000 rows and 10 columns (90% nuniques)"
testing.test_ml,generate_random_int_dataframe,DEBUG,2022-06-11 01:49:55,"Generating random_int table with 1,000,000 rows and 10 columns (90% nuniques)"
testing.test_ml,generate_random_int_dataframe,DEBUG,2022-06-11 01:50:00,"Generating random_int table with 5,000,000 rows and 10 columns (90% nuniques)"
testing.test_ml,generate_random_int_dataframe,DEBUG,2022-06-11 01:50:25,"Generating random_int table with 10,000,000 rows and 10 columns (90% nuniques)"
testing.test_ml,generate_random_int_dataframe,DEBUG,2022-06-11 01:51:20,"Generating random_int table with 50,000,000 rows and 10 columns (90% nuniques)"
testing.test_ml,generate_random_int_dataframe,DEBUG,2022-06-11 01:56:07,"Generating random_int table with 100,000,000 rows and 10 columns (90% nuniques)"
testing.test_ml,test_model,INFO,2022-06-11 02:05:36,"Started testing of a model with 5 rows"
testing.test_ml,test_model,DEBUG,2022-06-11 02:05:38,"Model on table 1 (100-10.csv)"
algorithms.machine_learning,find_unique_columns,DEBUG,2022-06-11 02:05:39,"Preparation: 0.009876355528831482s, prediction: 0.8910739384591579s"
testing.test_ml,test_model,DEBUG,2022-06-11 02:05:39,"Model on table 2 (1000-10.csv)"
algorithms.machine_learning,find_unique_columns,DEBUG,2022-06-11 02:05:40,"Preparation: 0.010074935853481293s, prediction: 0.888849750161171s"
testing.test_ml,test_model,DEBUG,2022-06-11 02:05:40,"Model on table 3 (10000-10.csv)"
algorithms.machine_learning,find_unique_columns,DEBUG,2022-06-11 02:05:41,"Preparation: 0.009821001440286636s, prediction: 0.8850635699927807s"
testing.test_ml,test_model,DEBUG,2022-06-11 02:05:41,"Model on table 4 (100000-10.csv)"
algorithms.machine_learning,find_unique_columns,DEBUG,2022-06-11 02:05:42,"Preparation: 0.010355960577726364s, prediction: 0.8858391977846622s"
testing.test_ml,test_model,DEBUG,2022-06-11 02:05:42,"Model on table 5 (1000000-10.csv)"
algorithms.machine_learning,find_unique_columns,DEBUG,2022-06-11 02:05:44,"Preparation: 0.010445043444633484s, prediction: 0.8913402147591114s"
testing.test_ml,test_model,DEBUG,2022-06-11 02:05:44,"Model on table 6 (10000000-10.csv)"
algorithms.machine_learning,find_unique_columns,DEBUG,2022-06-11 02:05:50,"Preparation: 0.010672055184841156s, prediction: 0.8901535682380199s"
testing.test_ml,test_model,DEBUG,2022-06-11 02:05:56,"Model on table 7 (100000000-10.csv)"
algorithms.machine_learning,find_unique_columns,DEBUG,2022-06-11 02:06:51,"Preparation: 0.010800451040267944s, prediction: 0.8882858939468861s"
testing.test_ml,test_model,DEBUG,2022-06-11 02:08:17,"Model on table 8 (5000000-10.csv)"
algorithms.machine_learning,find_unique_columns,DEBUG,2022-06-11 02:08:20,"Preparation: 0.01094813272356987s, prediction: 0.8883900530636311s"
testing.test_ml,test_model,DEBUG,2022-06-11 02:08:23,"Model on table 9 (50000000-10.csv)"
algorithms.machine_learning,find_unique_columns,DEBUG,2022-06-11 02:08:52,"Preparation: 0.010701261460781097s, prediction: 0.8874436840415001s"
testing.test_ml,test_model,DEBUG,2022-06-11 02:09:30,"Naive algorithm on table 1 (100-10.csv)"
testing.test_ml,test_model,DEBUG,2022-06-11 02:09:30,"Naive algorithm on table 2 (1000-10.csv)"
testing.test_ml,test_model,DEBUG,2022-06-11 02:09:30,"Naive algorithm on table 3 (10000-10.csv)"
testing.test_ml,test_model,DEBUG,2022-06-11 02:09:30,"Naive algorithm on table 4 (100000-10.csv)"
testing.test_ml,test_model,DEBUG,2022-06-11 02:09:31,"Naive algorithm on table 5 (1000000-10.csv)"
testing.test_ml,test_model,DEBUG,2022-06-11 02:09:36,"Naive algorithm on table 6 (10000000-10.csv)"
testing.test_ml,test_model,DEBUG,2022-06-11 02:10:44,"Naive algorithm on table 7 (100000000-10.csv)"
testing.test_ml,test_model,DEBUG,2022-06-11 02:25:56,"Naive algorithm on table 8 (5000000-10.csv)"
testing.test_ml,test_model,DEBUG,2022-06-11 02:26:27,"Naive algorithm on table 9 (50000000-10.csv)"
testing.test_ml,test_model,INFO,2022-06-11 02:33:17,"Finished testing"
__main__,random_int,INFO,2022-06-11 02:33:17,"Finished random_int test"
__main__,random_int,INFO,2022-06-11 02:33:17,"Started random_int test with filetype parquet and a maximum of 100,000,000 rows (small_table=True, 60% nuniques)"
testing.test_ml,generate_random_int_dataframe,DEBUG,2022-06-11 02:33:17,"Generating random_int table with 100 rows and 10 columns (60% nuniques)"
testing.test_ml,generate_random_int_dataframe,DEBUG,2022-06-11 02:33:17,"Generating random_int table with 1,000 rows and 10 columns (60% nuniques)"
testing.test_ml,generate_random_int_dataframe,DEBUG,2022-06-11 02:33:17,"Generating random_int table with 10,000 rows and 10 columns (60% nuniques)"
testing.test_ml,generate_random_int_dataframe,DEBUG,2022-06-11 02:33:17,"Generating random_int table with 100,000 rows and 10 columns (60% nuniques)"
testing.test_ml,generate_random_int_dataframe,DEBUG,2022-06-11 02:33:18,"Generating random_int table with 1,000,000 rows and 10 columns (60% nuniques)"
testing.test_ml,generate_random_int_dataframe,DEBUG,2022-06-11 02:33:20,"Generating random_int table with 5,000,000 rows and 10 columns (60% nuniques)"
testing.test_ml,generate_random_int_dataframe,DEBUG,2022-06-11 02:33:34,"Generating random_int table with 10,000,000 rows and 10 columns (60% nuniques)"
testing.test_ml,generate_random_int_dataframe,DEBUG,2022-06-11 02:34:08,"Generating random_int table with 50,000,000 rows and 10 columns (60% nuniques)"
testing.test_ml,generate_random_int_dataframe,DEBUG,2022-06-11 02:36:53,"Generating random_int table with 100,000,000 rows and 10 columns (60% nuniques)"
testing.test_ml,test_model,INFO,2022-06-11 02:42:22,"Started testing of a model with 10 rows"
testing.test_ml,test_model,DEBUG,2022-06-11 02:42:23,"Model on table 1 (100-10.parquet)"
algorithms.machine_learning,find_unique_columns,DEBUG,2022-06-11 02:42:23,"Preparation: 0.013245392590761185s, prediction: 0.45164185762405396s"
testing.test_ml,test_model,DEBUG,2022-06-11 02:42:23,"Model on table 2 (1000-10.parquet)"
algorithms.machine_learning,find_unique_columns,DEBUG,2022-06-11 02:42:24,"Preparation: 0.013175874948501587s, prediction: 0.4356779418885708s"
testing.test_ml,test_model,DEBUG,2022-06-11 02:42:24,"Model on table 3 (10000-10.parquet)"
algorithms.machine_learning,find_unique_columns,DEBUG,2022-06-11 02:42:24,"Preparation: 0.013138361275196075s, prediction: 0.43295644223690033s"
testing.test_ml,test_model,DEBUG,2022-06-11 02:42:24,"Model on table 4 (100000-10.parquet)"
algorithms.machine_learning,find_unique_columns,DEBUG,2022-06-11 02:42:25,"Preparation: 0.013176165521144867s, prediction: 0.438062846660614s"
testing.test_ml,test_model,DEBUG,2022-06-11 02:42:25,"Model on table 5 (1000000-10.parquet)"
algorithms.machine_learning,find_unique_columns,DEBUG,2022-06-11 02:42:25,"Preparation: 0.013331752270460129s, prediction: 0.43648554384708405s"
testing.test_ml,test_model,DEBUG,2022-06-11 02:42:27,"Model on table 6 (10000000-10.parquet)"
algorithms.machine_learning,find_unique_columns,DEBUG,2022-06-11 02:42:28,"Preparation: 0.013171512633562088s, prediction: 0.43333201110363007s"
testing.test_ml,test_model,DEBUG,2022-06-11 02:42:54,"Model on table 7 (100000000-10.parquet)"
algorithms.machine_learning,find_unique_columns,DEBUG,2022-06-11 02:42:56,"Preparation: 0.013491582125425339s, prediction: 0.4499896429479122s"
testing.test_ml,test_model,DEBUG,2022-06-11 02:48:40,"Model on table 8 (5000000-10.parquet)"
algorithms.machine_learning,find_unique_columns,DEBUG,2022-06-11 02:48:41,"Preparation: 0.01333131268620491s, prediction: 0.8497197926044464s"
testing.test_ml,test_model,DEBUG,2022-06-11 02:48:53,"Model on table 9 (50000000-10.parquet)"
algorithms.machine_learning,find_unique_columns,DEBUG,2022-06-11 02:48:54,"Preparation: 0.01305723562836647s, prediction: 0.43474744260311127s"
testing.test_ml,test_model,DEBUG,2022-06-11 02:51:28,"Naive algorithm on table 1 (100-10.parquet)"
testing.test_ml,test_model,DEBUG,2022-06-11 02:51:28,"Naive algorithm on table 2 (1000-10.parquet)"
testing.test_ml,test_model,DEBUG,2022-06-11 02:51:28,"Naive algorithm on table 3 (10000-10.parquet)"
testing.test_ml,test_model,DEBUG,2022-06-11 02:51:28,"Naive algorithm on table 4 (100000-10.parquet)"
testing.test_ml,test_model,DEBUG,2022-06-11 02:51:28,"Naive algorithm on table 5 (1000000-10.parquet)"
testing.test_ml,test_model,DEBUG,2022-06-11 02:51:33,"Naive algorithm on table 6 (10000000-10.parquet)"
testing.test_ml,test_model,DEBUG,2022-06-11 02:52:36,"Naive algorithm on table 7 (100000000-10.parquet)"
testing.test_ml,test_model,DEBUG,2022-06-11 03:06:58,"Naive algorithm on table 8 (5000000-10.parquet)"
testing.test_ml,test_model,DEBUG,2022-06-11 03:07:28,"Naive algorithm on table 9 (50000000-10.parquet)"
testing.test_ml,test_model,INFO,2022-06-11 03:13:49,"Finished testing"
__main__,random_int,INFO,2022-06-11 03:13:49,"Finished random_int test"
__main__,random_int,INFO,2022-06-11 03:13:49,"Started random_int test with filetype parquet and a maximum of 100,000,000 rows (small_table=False, 60% nuniques)"
testing.test_ml,test_model,INFO,2022-06-11 03:13:49,"Started testing of a model with 10 rows"
testing.test_ml,test_model,DEBUG,2022-06-11 03:13:50,"Model on table 1 (100-10.parquet)"
algorithms.machine_learning,find_unique_columns,DEBUG,2022-06-11 03:13:50,"Preparation: 0.01311621442437172s, prediction: 0.4487753100693226s"
testing.test_ml,test_model,DEBUG,2022-06-11 03:13:50,"Model on table 2 (1000-10.parquet)"
algorithms.machine_learning,find_unique_columns,DEBUG,2022-06-11 03:13:51,"Preparation: 0.013199623674154282s, prediction: 0.433330450206995s"
testing.test_ml,test_model,DEBUG,2022-06-11 03:13:51,"Model on table 3 (10000-10.parquet)"
algorithms.machine_learning,find_unique_columns,DEBUG,2022-06-11 03:13:52,"Preparation: 0.013118833303451538s, prediction: 0.9007596522569656s"
testing.test_ml,test_model,DEBUG,2022-06-11 03:13:52,"Model on table 4 (100000-10.parquet)"
algorithms.machine_learning,find_unique_columns,DEBUG,2022-06-11 03:13:52,"Preparation: 0.013401340693235397s, prediction: 0.43451396748423576s"
testing.test_ml,test_model,DEBUG,2022-06-11 03:13:52,"Model on table 5 (1000000-10.parquet)"
algorithms.machine_learning,find_unique_columns,DEBUG,2022-06-11 03:13:53,"Preparation: 0.013889208436012268s, prediction: 0.4354851506650448s"
testing.test_ml,test_model,DEBUG,2022-06-11 03:13:55,"Model on table 6 (10000000-10.parquet)"
algorithms.machine_learning,find_unique_columns,DEBUG,2022-06-11 03:13:56,"Preparation: 0.013530056923627853s, prediction: 0.4552101455628872s"
testing.test_ml,test_model,DEBUG,2022-06-11 03:14:21,"Model on table 7 (100000000-10.parquet)"
algorithms.machine_learning,find_unique_columns,DEBUG,2022-06-11 03:14:27,"Preparation: 0.01341579481959343s, prediction: 1.2942482084035873s"
testing.test_ml,test_model,DEBUG,2022-06-11 03:20:12,"Model on table 8 (5000000-10.parquet)"
algorithms.machine_learning,find_unique_columns,DEBUG,2022-06-11 03:20:13,"Preparation: 0.01353374868631363s, prediction: 0.4427579678595066s"
testing.test_ml,test_model,DEBUG,2022-06-11 03:20:24,"Model on table 9 (50000000-10.parquet)"
algorithms.machine_learning,find_unique_columns,DEBUG,2022-06-11 03:20:28,"Preparation: 0.013530980795621872s, prediction: 0.8616328872740269s"
testing.test_ml,test_model,DEBUG,2022-06-11 03:23:00,"Naive algorithm on table 1 (100-10.parquet)"
testing.test_ml,test_model,DEBUG,2022-06-11 03:23:00,"Naive algorithm on table 2 (1000-10.parquet)"
testing.test_ml,test_model,DEBUG,2022-06-11 03:23:00,"Naive algorithm on table 3 (10000-10.parquet)"
testing.test_ml,test_model,DEBUG,2022-06-11 03:23:00,"Naive algorithm on table 4 (100000-10.parquet)"
testing.test_ml,test_model,DEBUG,2022-06-11 03:23:01,"Naive algorithm on table 5 (1000000-10.parquet)"
testing.test_ml,test_model,DEBUG,2022-06-11 03:23:05,"Naive algorithm on table 6 (10000000-10.parquet)"
testing.test_ml,test_model,DEBUG,2022-06-11 03:24:09,"Naive algorithm on table 7 (100000000-10.parquet)"
testing.test_ml,test_model,DEBUG,2022-06-11 03:38:35,"Naive algorithm on table 8 (5000000-10.parquet)"
testing.test_ml,test_model,DEBUG,2022-06-11 03:39:04,"Naive algorithm on table 9 (50000000-10.parquet)"
testing.test_ml,test_model,INFO,2022-06-11 03:45:29,"Finished testing"
__main__,random_int,INFO,2022-06-11 03:45:29,"Finished random_int test"
__main__,random_int,INFO,2022-06-11 03:45:29,"Started random_int test with filetype csv and a maximum of 100,000,000 rows (small_table=False, 60% nuniques)"
testing.test_ml,generate_random_int_dataframe,DEBUG,2022-06-11 03:45:29,"Generating random_int table with 100 rows and 10 columns (60% nuniques)"
testing.test_ml,generate_random_int_dataframe,DEBUG,2022-06-11 03:45:29,"Generating random_int table with 1,000 rows and 10 columns (60% nuniques)"
testing.test_ml,generate_random_int_dataframe,DEBUG,2022-06-11 03:45:29,"Generating random_int table with 10,000 rows and 10 columns (60% nuniques)"
testing.test_ml,generate_random_int_dataframe,DEBUG,2022-06-11 03:45:29,"Generating random_int table with 100,000 rows and 10 columns (60% nuniques)"
testing.test_ml,generate_random_int_dataframe,DEBUG,2022-06-11 03:45:29,"Generating random_int table with 1,000,000 rows and 10 columns (60% nuniques)"
testing.test_ml,generate_random_int_dataframe,DEBUG,2022-06-11 03:45:34,"Generating random_int table with 5,000,000 rows and 10 columns (60% nuniques)"
testing.test_ml,generate_random_int_dataframe,DEBUG,2022-06-11 03:45:58,"Generating random_int table with 10,000,000 rows and 10 columns (60% nuniques)"
testing.test_ml,generate_random_int_dataframe,DEBUG,2022-06-11 03:46:54,"Generating random_int table with 50,000,000 rows and 10 columns (60% nuniques)"
testing.test_ml,generate_random_int_dataframe,DEBUG,2022-06-11 03:51:37,"Generating random_int table with 100,000,000 rows and 10 columns (60% nuniques)"
testing.test_ml,test_model,INFO,2022-06-11 04:00:56,"Started testing of a model with 10 rows"
testing.test_ml,test_model,DEBUG,2022-06-11 04:00:57,"Model on table 1 (100-10.csv)"
algorithms.machine_learning,find_unique_columns,DEBUG,2022-06-11 04:00:57,"Preparation: 0.0128493532538414s, prediction: 0.4432951882481575s"
testing.test_ml,test_model,DEBUG,2022-06-11 04:00:57,"Model on table 2 (1000-10.csv)"
algorithms.machine_learning,find_unique_columns,DEBUG,2022-06-11 04:00:58,"Preparation: 0.013089042156934738s, prediction: 0.5892130471765995s"
testing.test_ml,test_model,DEBUG,2022-06-11 04:00:58,"Model on table 3 (10000-10.csv)"
algorithms.machine_learning,find_unique_columns,DEBUG,2022-06-11 04:00:58,"Preparation: 0.013317964971065521s, prediction: 0.43511784076690674s"
testing.test_ml,test_model,DEBUG,2022-06-11 04:00:58,"Model on table 4 (100000-10.csv)"
algorithms.machine_learning,find_unique_columns,DEBUG,2022-06-11 04:00:59,"Preparation: 0.01362822949886322s, prediction: 0.4468989185988903s"
testing.test_ml,test_model,DEBUG,2022-06-11 04:00:59,"Model on table 5 (1000000-10.csv)"
algorithms.machine_learning,find_unique_columns,DEBUG,2022-06-11 04:01:00,"Preparation: 0.013541806489229202s, prediction: 0.43864696472883224s"
testing.test_ml,test_model,DEBUG,2022-06-11 04:01:01,"Model on table 6 (10000000-10.csv)"
algorithms.machine_learning,find_unique_columns,DEBUG,2022-06-11 04:01:07,"Preparation: 0.013544239103794098s, prediction: 0.4416612759232521s"
testing.test_ml,test_model,DEBUG,2022-06-11 04:01:32,"Model on table 7 (100000000-10.csv)"
algorithms.machine_learning,find_unique_columns,DEBUG,2022-06-11 04:02:25,"Preparation: 0.013825368136167526s, prediction: 0.4364723786711693s"
testing.test_ml,test_model,DEBUG,2022-06-11 04:08:08,"Model on table 8 (5000000-10.csv)"
algorithms.machine_learning,find_unique_columns,DEBUG,2022-06-11 04:08:11,"Preparation: 0.013590250164270401s, prediction: 0.4580414183437824s"
testing.test_ml,test_model,DEBUG,2022-06-11 04:08:23,"Model on table 9 (50000000-10.csv)"
algorithms.machine_learning,find_unique_columns,DEBUG,2022-06-11 04:08:50,"Preparation: 0.01346469298005104s, prediction: 0.43403470143675804s"
testing.test_ml,test_model,DEBUG,2022-06-11 04:11:22,"Naive algorithm on table 1 (100-10.csv)"
testing.test_ml,test_model,DEBUG,2022-06-11 04:11:22,"Naive algorithm on table 2 (1000-10.csv)"
testing.test_ml,test_model,DEBUG,2022-06-11 04:11:22,"Naive algorithm on table 3 (10000-10.csv)"
testing.test_ml,test_model,DEBUG,2022-06-11 04:11:22,"Naive algorithm on table 4 (100000-10.csv)"
testing.test_ml,test_model,DEBUG,2022-06-11 04:11:23,"Naive algorithm on table 5 (1000000-10.csv)"
testing.test_ml,test_model,DEBUG,2022-06-11 04:11:28,"Naive algorithm on table 6 (10000000-10.csv)"
testing.test_ml,test_model,DEBUG,2022-06-11 04:12:35,"Naive algorithm on table 7 (100000000-10.csv)"
testing.test_ml,test_model,DEBUG,2022-06-11 04:27:39,"Naive algorithm on table 8 (5000000-10.csv)"
testing.test_ml,test_model,DEBUG,2022-06-11 04:28:11,"Naive algorithm on table 9 (50000000-10.csv)"
testing.test_ml,test_model,INFO,2022-06-11 04:34:57,"Finished testing"
__main__,random_int,INFO,2022-06-11 04:34:57,"Finished random_int test"
__main__,random_int,INFO,2022-06-11 04:34:57,"Started random_int test with filetype parquet and a maximum of 100,000,000 rows (small_table=True, 70% nuniques)"
testing.test_ml,generate_random_int_dataframe,DEBUG,2022-06-11 04:34:58,"Generating random_int table with 100 rows and 10 columns (70% nuniques)"
testing.test_ml,generate_random_int_dataframe,DEBUG,2022-06-11 04:34:58,"Generating random_int table with 1,000 rows and 10 columns (70% nuniques)"
testing.test_ml,generate_random_int_dataframe,DEBUG,2022-06-11 04:34:58,"Generating random_int table with 10,000 rows and 10 columns (70% nuniques)"
testing.test_ml,generate_random_int_dataframe,DEBUG,2022-06-11 04:34:58,"Generating random_int table with 100,000 rows and 10 columns (70% nuniques)"
testing.test_ml,generate_random_int_dataframe,DEBUG,2022-06-11 04:34:58,"Generating random_int table with 1,000,000 rows and 10 columns (70% nuniques)"
testing.test_ml,generate_random_int_dataframe,DEBUG,2022-06-11 04:35:01,"Generating random_int table with 5,000,000 rows and 10 columns (70% nuniques)"
testing.test_ml,generate_random_int_dataframe,DEBUG,2022-06-11 04:35:14,"Generating random_int table with 10,000,000 rows and 10 columns (70% nuniques)"
testing.test_ml,generate_random_int_dataframe,DEBUG,2022-06-11 04:35:49,"Generating random_int table with 50,000,000 rows and 10 columns (70% nuniques)"
testing.test_ml,generate_random_int_dataframe,DEBUG,2022-06-11 04:38:39,"Generating random_int table with 100,000,000 rows and 10 columns (70% nuniques)"
testing.test_ml,test_model,INFO,2022-06-11 04:44:21,"Started testing of a model with 10 rows"
testing.test_ml,test_model,DEBUG,2022-06-11 04:44:22,"Model on table 1 (100-10.parquet)"
algorithms.machine_learning,find_unique_columns,DEBUG,2022-06-11 04:44:22,"Preparation: 0.012282412499189377s, prediction: 0.4458095207810402s"
testing.test_ml,test_model,DEBUG,2022-06-11 04:44:22,"Model on table 2 (1000-10.parquet)"
algorithms.machine_learning,find_unique_columns,DEBUG,2022-06-11 04:44:22,"Preparation: 0.012137584388256073s, prediction: 0.44368776679039s"
testing.test_ml,test_model,DEBUG,2022-06-11 04:44:22,"Model on table 3 (10000-10.parquet)"
algorithms.machine_learning,find_unique_columns,DEBUG,2022-06-11 04:44:23,"Preparation: 0.012060817331075668s, prediction: 0.43890439346432686s"
testing.test_ml,test_model,DEBUG,2022-06-11 04:44:23,"Model on table 4 (100000-10.parquet)"
algorithms.machine_learning,find_unique_columns,DEBUG,2022-06-11 04:44:24,"Preparation: 0.012307416647672653s, prediction: 1.4556912183761597s"
testing.test_ml,test_model,DEBUG,2022-06-11 04:44:24,"Model on table 5 (1000000-10.parquet)"
algorithms.machine_learning,find_unique_columns,DEBUG,2022-06-11 04:44:25,"Preparation: 0.012526102364063263s, prediction: 0.44201458245515823s"
testing.test_ml,test_model,DEBUG,2022-06-11 04:44:26,"Model on table 6 (10000000-10.parquet)"
algorithms.machine_learning,find_unique_columns,DEBUG,2022-06-11 04:44:27,"Preparation: 0.012656029313802719s, prediction: 0.43417683616280556s"
testing.test_ml,test_model,DEBUG,2022-06-11 04:44:46,"Model on table 7 (100000000-10.parquet)"
algorithms.machine_learning,find_unique_columns,DEBUG,2022-06-11 04:44:48,"Preparation: 0.01212020218372345s, prediction: 0.43394798040390015s"
testing.test_ml,test_model,DEBUG,2022-06-11 04:49:08,"Model on table 8 (5000000-10.parquet)"
algorithms.machine_learning,find_unique_columns,DEBUG,2022-06-11 04:49:08,"Preparation: 0.011944476515054703s, prediction: 0.45039357990026474s"
testing.test_ml,test_model,DEBUG,2022-06-11 04:49:17,"Model on table 9 (50000000-10.parquet)"
algorithms.machine_learning,find_unique_columns,DEBUG,2022-06-11 04:49:19,"Preparation: 0.012103535234928131s, prediction: 0.43496059998869896s"
testing.test_ml,test_model,DEBUG,2022-06-11 04:51:15,"Naive algorithm on table 1 (100-10.parquet)"
testing.test_ml,test_model,DEBUG,2022-06-11 04:51:15,"Naive algorithm on table 2 (1000-10.parquet)"
testing.test_ml,test_model,DEBUG,2022-06-11 04:51:15,"Naive algorithm on table 3 (10000-10.parquet)"
testing.test_ml,test_model,DEBUG,2022-06-11 04:51:15,"Naive algorithm on table 4 (100000-10.parquet)"
testing.test_ml,test_model,DEBUG,2022-06-11 04:51:15,"Naive algorithm on table 5 (1000000-10.parquet)"
testing.test_ml,test_model,DEBUG,2022-06-11 04:51:20,"Naive algorithm on table 6 (10000000-10.parquet)"
testing.test_ml,test_model,DEBUG,2022-06-11 04:52:24,"Naive algorithm on table 7 (100000000-10.parquet)"
testing.test_ml,test_model,DEBUG,2022-06-11 05:06:45,"Naive algorithm on table 8 (5000000-10.parquet)"
testing.test_ml,test_model,DEBUG,2022-06-11 05:07:14,"Naive algorithm on table 9 (50000000-10.parquet)"
testing.test_ml,test_model,INFO,2022-06-11 05:13:36,"Finished testing"
__main__,random_int,INFO,2022-06-11 05:13:36,"Finished random_int test"
__main__,random_int,INFO,2022-06-11 05:13:36,"Started random_int test with filetype parquet and a maximum of 100,000,000 rows (small_table=False, 70% nuniques)"
testing.test_ml,test_model,INFO,2022-06-11 05:13:36,"Started testing of a model with 10 rows"
testing.test_ml,test_model,DEBUG,2022-06-11 05:13:36,"Model on table 1 (100-10.parquet)"
algorithms.machine_learning,find_unique_columns,DEBUG,2022-06-11 05:13:37,"Preparation: 0.011946666985750198s, prediction: 0.4414179101586342s"
testing.test_ml,test_model,DEBUG,2022-06-11 05:13:37,"Model on table 2 (1000-10.parquet)"
algorithms.machine_learning,find_unique_columns,DEBUG,2022-06-11 05:13:37,"Preparation: 0.011882726103067398s, prediction: 0.43250463530421257s"
testing.test_ml,test_model,DEBUG,2022-06-11 05:13:37,"Model on table 3 (10000-10.parquet)"
algorithms.machine_learning,find_unique_columns,DEBUG,2022-06-11 05:13:38,"Preparation: 0.012034837156534195s, prediction: 0.43419428542256355s"
testing.test_ml,test_model,DEBUG,2022-06-11 05:13:38,"Model on table 4 (100000-10.parquet)"
algorithms.machine_learning,find_unique_columns,DEBUG,2022-06-11 05:13:38,"Preparation: 0.012378863990306854s, prediction: 0.43444447964429855s"
testing.test_ml,test_model,DEBUG,2022-06-11 05:13:38,"Model on table 5 (1000000-10.parquet)"
algorithms.machine_learning,find_unique_columns,DEBUG,2022-06-11 05:13:39,"Preparation: 0.012406371533870697s, prediction: 0.44986528903245926s"
testing.test_ml,test_model,DEBUG,2022-06-11 05:13:40,"Model on table 6 (10000000-10.parquet)"
algorithms.machine_learning,find_unique_columns,DEBUG,2022-06-11 05:13:41,"Preparation: 0.012152858078479767s, prediction: 0.46760202571749687s"
testing.test_ml,test_model,DEBUG,2022-06-11 05:14:00,"Model on table 7 (100000000-10.parquet)"
algorithms.machine_learning,find_unique_columns,DEBUG,2022-06-11 05:14:06,"Preparation: 0.012307930737733841s, prediction: 1.5363462045788765s"
testing.test_ml,test_model,DEBUG,2022-06-11 05:18:24,"Model on table 8 (5000000-10.parquet)"
algorithms.machine_learning,find_unique_columns,DEBUG,2022-06-11 05:18:26,"Preparation: 0.012379877269268036s, prediction: 1.2513628788292408s"
testing.test_ml,test_model,DEBUG,2022-06-11 05:18:34,"Model on table 9 (50000000-10.parquet)"
algorithms.machine_learning,find_unique_columns,DEBUG,2022-06-11 05:18:38,"Preparation: 0.01243828609585762s, prediction: 0.9743804335594177s"
testing.test_ml,test_model,DEBUG,2022-06-11 05:20:32,"Naive algorithm on table 1 (100-10.parquet)"
testing.test_ml,test_model,DEBUG,2022-06-11 05:20:32,"Naive algorithm on table 2 (1000-10.parquet)"
testing.test_ml,test_model,DEBUG,2022-06-11 05:20:32,"Naive algorithm on table 3 (10000-10.parquet)"
testing.test_ml,test_model,DEBUG,2022-06-11 05:20:32,"Naive algorithm on table 4 (100000-10.parquet)"
testing.test_ml,test_model,DEBUG,2022-06-11 05:20:32,"Naive algorithm on table 5 (1000000-10.parquet)"
testing.test_ml,test_model,DEBUG,2022-06-11 05:20:37,"Naive algorithm on table 6 (10000000-10.parquet)"
testing.test_ml,test_model,DEBUG,2022-06-11 05:21:40,"Naive algorithm on table 7 (100000000-10.parquet)"
testing.test_ml,test_model,DEBUG,2022-06-11 05:36:02,"Naive algorithm on table 8 (5000000-10.parquet)"
testing.test_ml,test_model,DEBUG,2022-06-11 05:36:31,"Naive algorithm on table 9 (50000000-10.parquet)"
testing.test_ml,test_model,INFO,2022-06-11 05:42:53,"Finished testing"
__main__,random_int,INFO,2022-06-11 05:42:53,"Finished random_int test"
__main__,random_int,INFO,2022-06-11 05:42:53,"Started random_int test with filetype csv and a maximum of 100,000,000 rows (small_table=False, 70% nuniques)"
testing.test_ml,generate_random_int_dataframe,DEBUG,2022-06-11 05:42:53,"Generating random_int table with 100 rows and 10 columns (70% nuniques)"
testing.test_ml,generate_random_int_dataframe,DEBUG,2022-06-11 05:42:53,"Generating random_int table with 1,000 rows and 10 columns (70% nuniques)"
testing.test_ml,generate_random_int_dataframe,DEBUG,2022-06-11 05:42:53,"Generating random_int table with 10,000 rows and 10 columns (70% nuniques)"
testing.test_ml,generate_random_int_dataframe,DEBUG,2022-06-11 05:42:53,"Generating random_int table with 100,000 rows and 10 columns (70% nuniques)"
testing.test_ml,generate_random_int_dataframe,DEBUG,2022-06-11 05:42:53,"Generating random_int table with 1,000,000 rows and 10 columns (70% nuniques)"
testing.test_ml,generate_random_int_dataframe,DEBUG,2022-06-11 05:42:58,"Generating random_int table with 5,000,000 rows and 10 columns (70% nuniques)"
testing.test_ml,generate_random_int_dataframe,DEBUG,2022-06-11 05:43:25,"Generating random_int table with 10,000,000 rows and 10 columns (70% nuniques)"
testing.test_ml,generate_random_int_dataframe,DEBUG,2022-06-11 05:44:22,"Generating random_int table with 50,000,000 rows and 10 columns (70% nuniques)"
testing.test_ml,generate_random_int_dataframe,DEBUG,2022-06-11 05:49:12,"Generating random_int table with 100,000,000 rows and 10 columns (70% nuniques)"
testing.test_ml,test_model,INFO,2022-06-11 05:58:47,"Started testing of a model with 10 rows"
testing.test_ml,test_model,DEBUG,2022-06-11 05:58:47,"Model on table 1 (100-10.csv)"
algorithms.machine_learning,find_unique_columns,DEBUG,2022-06-11 05:58:49,"Preparation: 0.01174943894147873s, prediction: 1.069807343184948s"
testing.test_ml,test_model,DEBUG,2022-06-11 05:58:49,"Model on table 2 (1000-10.csv)"
algorithms.machine_learning,find_unique_columns,DEBUG,2022-06-11 05:58:49,"Preparation: 0.012112203985452652s, prediction: 0.4364721141755581s"
testing.test_ml,test_model,DEBUG,2022-06-11 05:58:49,"Model on table 3 (10000-10.csv)"
algorithms.machine_learning,find_unique_columns,DEBUG,2022-06-11 05:58:49,"Preparation: 0.012277115136384964s, prediction: 0.4336729496717453s"
testing.test_ml,test_model,DEBUG,2022-06-11 05:58:49,"Model on table 4 (100000-10.csv)"
algorithms.machine_learning,find_unique_columns,DEBUG,2022-06-11 05:58:50,"Preparation: 0.012590643018484116s, prediction: 0.4392852634191513s"
testing.test_ml,test_model,DEBUG,2022-06-11 05:58:50,"Model on table 5 (1000000-10.csv)"
algorithms.machine_learning,find_unique_columns,DEBUG,2022-06-11 05:58:51,"Preparation: 0.012465745210647583s, prediction: 0.4413852244615555s"
testing.test_ml,test_model,DEBUG,2022-06-11 05:58:52,"Model on table 6 (10000000-10.csv)"
algorithms.machine_learning,find_unique_columns,DEBUG,2022-06-11 05:58:57,"Preparation: 0.01251932978630066s, prediction: 0.4337729513645172s"
testing.test_ml,test_model,DEBUG,2022-06-11 05:59:17,"Model on table 7 (100000000-10.csv)"
algorithms.machine_learning,find_unique_columns,DEBUG,2022-06-11 06:00:09,"Preparation: 0.012723155319690704s, prediction: 0.43096135556697845s"
testing.test_ml,test_model,DEBUG,2022-06-11 06:04:28,"Model on table 8 (5000000-10.csv)"
algorithms.machine_learning,find_unique_columns,DEBUG,2022-06-11 06:04:31,"Preparation: 0.01253867894411087s, prediction: 0.4378349855542183s"
testing.test_ml,test_model,DEBUG,2022-06-11 06:04:39,"Model on table 9 (50000000-10.csv)"
algorithms.machine_learning,find_unique_columns,DEBUG,2022-06-11 06:05:07,"Preparation: 0.012831121683120728s, prediction: 0.4450794942677021s"
testing.test_ml,test_model,DEBUG,2022-06-11 06:07:02,"Naive algorithm on table 1 (100-10.csv)"
testing.test_ml,test_model,DEBUG,2022-06-11 06:07:02,"Naive algorithm on table 2 (1000-10.csv)"
testing.test_ml,test_model,DEBUG,2022-06-11 06:07:02,"Naive algorithm on table 3 (10000-10.csv)"
testing.test_ml,test_model,DEBUG,2022-06-11 06:07:02,"Naive algorithm on table 4 (100000-10.csv)"
testing.test_ml,test_model,DEBUG,2022-06-11 06:07:02,"Naive algorithm on table 5 (1000000-10.csv)"
testing.test_ml,test_model,DEBUG,2022-06-11 06:07:08,"Naive algorithm on table 6 (10000000-10.csv)"
testing.test_ml,test_model,DEBUG,2022-06-11 06:08:15,"Naive algorithm on table 7 (100000000-10.csv)"
testing.test_ml,test_model,DEBUG,2022-06-11 06:23:22,"Naive algorithm on table 8 (5000000-10.csv)"
testing.test_ml,test_model,DEBUG,2022-06-11 06:23:54,"Naive algorithm on table 9 (50000000-10.csv)"
testing.test_ml,test_model,INFO,2022-06-11 06:30:42,"Finished testing"
__main__,random_int,INFO,2022-06-11 06:30:42,"Finished random_int test"
__main__,random_int,INFO,2022-06-11 06:30:42,"Started random_int test with filetype parquet and a maximum of 100,000,000 rows (small_table=True, 80% nuniques)"
testing.test_ml,generate_random_int_dataframe,DEBUG,2022-06-11 06:30:42,"Generating random_int table with 100 rows and 10 columns (80% nuniques)"
testing.test_ml,generate_random_int_dataframe,DEBUG,2022-06-11 06:30:42,"Generating random_int table with 1,000 rows and 10 columns (80% nuniques)"
testing.test_ml,generate_random_int_dataframe,DEBUG,2022-06-11 06:30:42,"Generating random_int table with 10,000 rows and 10 columns (80% nuniques)"
testing.test_ml,generate_random_int_dataframe,DEBUG,2022-06-11 06:30:42,"Generating random_int table with 100,000 rows and 10 columns (80% nuniques)"
testing.test_ml,generate_random_int_dataframe,DEBUG,2022-06-11 06:30:42,"Generating random_int table with 1,000,000 rows and 10 columns (80% nuniques)"
testing.test_ml,generate_random_int_dataframe,DEBUG,2022-06-11 06:30:45,"Generating random_int table with 5,000,000 rows and 10 columns (80% nuniques)"
testing.test_ml,generate_random_int_dataframe,DEBUG,2022-06-11 06:30:58,"Generating random_int table with 10,000,000 rows and 10 columns (80% nuniques)"
testing.test_ml,generate_random_int_dataframe,DEBUG,2022-06-11 06:31:32,"Generating random_int table with 50,000,000 rows and 10 columns (80% nuniques)"
testing.test_ml,generate_random_int_dataframe,DEBUG,2022-06-11 06:34:20,"Generating random_int table with 100,000,000 rows and 10 columns (80% nuniques)"
testing.test_ml,test_model,INFO,2022-06-11 06:39:54,"Started testing of a model with 10 rows"
testing.test_ml,test_model,DEBUG,2022-06-11 06:39:55,"Model on table 1 (100-10.parquet)"
algorithms.machine_learning,find_unique_columns,DEBUG,2022-06-11 06:39:55,"Preparation: 0.010839644819498062s, prediction: 0.4523605927824974s"
testing.test_ml,test_model,DEBUG,2022-06-11 06:39:55,"Model on table 2 (1000-10.parquet)"
algorithms.machine_learning,find_unique_columns,DEBUG,2022-06-11 06:39:56,"Preparation: 0.011001873761415482s, prediction: 0.4404979273676872s"
testing.test_ml,test_model,DEBUG,2022-06-11 06:39:56,"Model on table 3 (10000-10.parquet)"
algorithms.machine_learning,find_unique_columns,DEBUG,2022-06-11 06:39:56,"Preparation: 0.011241737753152847s, prediction: 0.43385786935687065s"
testing.test_ml,test_model,DEBUG,2022-06-11 06:39:56,"Model on table 4 (100000-10.parquet)"
algorithms.machine_learning,find_unique_columns,DEBUG,2022-06-11 06:39:57,"Preparation: 0.011311456561088562s, prediction: 0.446920920163393s"
testing.test_ml,test_model,DEBUG,2022-06-11 06:39:57,"Model on table 5 (1000000-10.parquet)"
algorithms.machine_learning,find_unique_columns,DEBUG,2022-06-11 06:39:57,"Preparation: 0.011449281126260757s, prediction: 0.43465158343315125s"
testing.test_ml,test_model,DEBUG,2022-06-11 06:39:58,"Model on table 6 (10000000-10.parquet)"
algorithms.machine_learning,find_unique_columns,DEBUG,2022-06-11 06:39:59,"Preparation: 0.011385399848222733s, prediction: 0.908231571316719s"
testing.test_ml,test_model,DEBUG,2022-06-11 06:40:12,"Model on table 7 (100000000-10.parquet)"
algorithms.machine_learning,find_unique_columns,DEBUG,2022-06-11 06:40:14,"Preparation: 0.011249180883169174s, prediction: 0.4322011098265648s"
testing.test_ml,test_model,DEBUG,2022-06-11 06:43:08,"Model on table 8 (5000000-10.parquet)"
algorithms.machine_learning,find_unique_columns,DEBUG,2022-06-11 06:43:08,"Preparation: 0.011333711445331573s, prediction: 0.5862208046019077s"
testing.test_ml,test_model,DEBUG,2022-06-11 06:43:14,"Model on table 9 (50000000-10.parquet)"
algorithms.machine_learning,find_unique_columns,DEBUG,2022-06-11 06:43:16,"Preparation: 0.011363517493009567s, prediction: 0.43720167875289917s"
testing.test_ml,test_model,DEBUG,2022-06-11 06:44:34,"Naive algorithm on table 1 (100-10.parquet)"
testing.test_ml,test_model,DEBUG,2022-06-11 06:44:34,"Naive algorithm on table 2 (1000-10.parquet)"
testing.test_ml,test_model,DEBUG,2022-06-11 06:44:34,"Naive algorithm on table 3 (10000-10.parquet)"
testing.test_ml,test_model,DEBUG,2022-06-11 06:44:34,"Naive algorithm on table 4 (100000-10.parquet)"
testing.test_ml,test_model,DEBUG,2022-06-11 06:44:34,"Naive algorithm on table 5 (1000000-10.parquet)"
testing.test_ml,test_model,DEBUG,2022-06-11 06:44:39,"Naive algorithm on table 6 (10000000-10.parquet)"
testing.test_ml,test_model,DEBUG,2022-06-11 06:45:42,"Naive algorithm on table 7 (100000000-10.parquet)"
testing.test_ml,test_model,DEBUG,2022-06-11 07:00:08,"Naive algorithm on table 8 (5000000-10.parquet)"
testing.test_ml,test_model,DEBUG,2022-06-11 07:00:37,"Naive algorithm on table 9 (50000000-10.parquet)"
testing.test_ml,test_model,INFO,2022-06-11 07:07:01,"Finished testing"
__main__,random_int,INFO,2022-06-11 07:07:01,"Finished random_int test"
__main__,random_int,INFO,2022-06-11 07:07:01,"Started random_int test with filetype parquet and a maximum of 100,000,000 rows (small_table=False, 80% nuniques)"
testing.test_ml,test_model,INFO,2022-06-11 07:07:01,"Started testing of a model with 10 rows"
testing.test_ml,test_model,DEBUG,2022-06-11 07:07:02,"Model on table 1 (100-10.parquet)"
algorithms.machine_learning,find_unique_columns,DEBUG,2022-06-11 07:07:02,"Preparation: 0.011224612593650818s, prediction: 0.4332898147404194s"
testing.test_ml,test_model,DEBUG,2022-06-11 07:07:02,"Model on table 2 (1000-10.parquet)"
algorithms.machine_learning,find_unique_columns,DEBUG,2022-06-11 07:07:03,"Preparation: 0.011093024164438248s, prediction: 0.4327164627611637s"
testing.test_ml,test_model,DEBUG,2022-06-11 07:07:03,"Model on table 3 (10000-10.parquet)"
algorithms.machine_learning,find_unique_columns,DEBUG,2022-06-11 07:07:03,"Preparation: 0.011160522699356079s, prediction: 0.43363402411341667s"
testing.test_ml,test_model,DEBUG,2022-06-11 07:07:03,"Model on table 4 (100000-10.parquet)"
algorithms.machine_learning,find_unique_columns,DEBUG,2022-06-11 07:07:03,"Preparation: 0.011244770139455795s, prediction: 0.4328143186867237s"
testing.test_ml,test_model,DEBUG,2022-06-11 07:07:04,"Model on table 5 (1000000-10.parquet)"
algorithms.machine_learning,find_unique_columns,DEBUG,2022-06-11 07:07:04,"Preparation: 0.011672843247652054s, prediction: 0.4326302073895931s"
testing.test_ml,test_model,DEBUG,2022-06-11 07:07:05,"Model on table 6 (10000000-10.parquet)"
algorithms.machine_learning,find_unique_columns,DEBUG,2022-06-11 07:07:06,"Preparation: 0.011253736913204193s, prediction: 0.440812848508358s"
testing.test_ml,test_model,DEBUG,2022-06-11 07:07:19,"Model on table 7 (100000000-10.parquet)"
algorithms.machine_learning,find_unique_columns,DEBUG,2022-06-11 07:07:24,"Preparation: 0.011274278163909912s, prediction: 1.1683743484318256s"
testing.test_ml,test_model,DEBUG,2022-06-11 07:10:17,"Model on table 8 (5000000-10.parquet)"
algorithms.machine_learning,find_unique_columns,DEBUG,2022-06-11 07:10:17,"Preparation: 0.01175868883728981s, prediction: 0.7047562189400196s"
testing.test_ml,test_model,DEBUG,2022-06-11 07:10:24,"Model on table 9 (50000000-10.parquet)"
algorithms.machine_learning,find_unique_columns,DEBUG,2022-06-11 07:10:27,"Preparation: 0.01136360689997673s, prediction: 0.9428160451352596s"
testing.test_ml,test_model,DEBUG,2022-06-11 07:11:43,"Naive algorithm on table 1 (100-10.parquet)"
testing.test_ml,test_model,DEBUG,2022-06-11 07:11:43,"Naive algorithm on table 2 (1000-10.parquet)"
testing.test_ml,test_model,DEBUG,2022-06-11 07:11:43,"Naive algorithm on table 3 (10000-10.parquet)"
testing.test_ml,test_model,DEBUG,2022-06-11 07:11:43,"Naive algorithm on table 4 (100000-10.parquet)"
testing.test_ml,test_model,DEBUG,2022-06-11 07:11:44,"Naive algorithm on table 5 (1000000-10.parquet)"
testing.test_ml,test_model,DEBUG,2022-06-11 07:11:48,"Naive algorithm on table 6 (10000000-10.parquet)"
testing.test_ml,test_model,DEBUG,2022-06-11 07:12:52,"Naive algorithm on table 7 (100000000-10.parquet)"
testing.test_ml,test_model,DEBUG,2022-06-11 07:27:19,"Naive algorithm on table 8 (5000000-10.parquet)"
testing.test_ml,test_model,DEBUG,2022-06-11 07:27:48,"Naive algorithm on table 9 (50000000-10.parquet)"
testing.test_ml,test_model,INFO,2022-06-11 07:34:11,"Finished testing"
__main__,random_int,INFO,2022-06-11 07:34:11,"Finished random_int test"
__main__,random_int,INFO,2022-06-11 07:34:11,"Started random_int test with filetype csv and a maximum of 100,000,000 rows (small_table=False, 80% nuniques)"
testing.test_ml,generate_random_int_dataframe,DEBUG,2022-06-11 07:34:12,"Generating random_int table with 100 rows and 10 columns (80% nuniques)"
testing.test_ml,generate_random_int_dataframe,DEBUG,2022-06-11 07:34:12,"Generating random_int table with 1,000 rows and 10 columns (80% nuniques)"
testing.test_ml,generate_random_int_dataframe,DEBUG,2022-06-11 07:34:12,"Generating random_int table with 10,000 rows and 10 columns (80% nuniques)"
testing.test_ml,generate_random_int_dataframe,DEBUG,2022-06-11 07:34:12,"Generating random_int table with 100,000 rows and 10 columns (80% nuniques)"
testing.test_ml,generate_random_int_dataframe,DEBUG,2022-06-11 07:34:12,"Generating random_int table with 1,000,000 rows and 10 columns (80% nuniques)"
testing.test_ml,generate_random_int_dataframe,DEBUG,2022-06-11 07:34:18,"Generating random_int table with 5,000,000 rows and 10 columns (80% nuniques)"
testing.test_ml,generate_random_int_dataframe,DEBUG,2022-06-11 07:34:47,"Generating random_int table with 10,000,000 rows and 10 columns (80% nuniques)"
testing.test_ml,generate_random_int_dataframe,DEBUG,2022-06-11 07:35:44,"Generating random_int table with 50,000,000 rows and 10 columns (80% nuniques)"
testing.test_ml,generate_random_int_dataframe,DEBUG,2022-06-11 07:40:30,"Generating random_int table with 100,000,000 rows and 10 columns (80% nuniques)"
testing.test_ml,test_model,INFO,2022-06-11 07:49:58,"Started testing of a model with 10 rows"
testing.test_ml,test_model,DEBUG,2022-06-11 07:49:58,"Model on table 1 (100-10.csv)"
algorithms.machine_learning,find_unique_columns,DEBUG,2022-06-11 07:49:59,"Preparation: 0.010861445218324661s, prediction: 0.4365409053862095s"
testing.test_ml,test_model,DEBUG,2022-06-11 07:49:59,"Model on table 2 (1000-10.csv)"
algorithms.machine_learning,find_unique_columns,DEBUG,2022-06-11 07:49:59,"Preparation: 0.01090308278799057s, prediction: 0.4318416304886341s"
testing.test_ml,test_model,DEBUG,2022-06-11 07:49:59,"Model on table 3 (10000-10.csv)"
algorithms.machine_learning,find_unique_columns,DEBUG,2022-06-11 07:49:59,"Preparation: 0.011287391185760498s, prediction: 0.4340125024318695s"
testing.test_ml,test_model,DEBUG,2022-06-11 07:49:59,"Model on table 4 (100000-10.csv)"
algorithms.machine_learning,find_unique_columns,DEBUG,2022-06-11 07:50:00,"Preparation: 0.011651173233985901s, prediction: 0.4349145442247391s"
testing.test_ml,test_model,DEBUG,2022-06-11 07:50:00,"Model on table 5 (1000000-10.csv)"
algorithms.machine_learning,find_unique_columns,DEBUG,2022-06-11 07:50:01,"Preparation: 0.011460140347480774s, prediction: 0.4404061958193779s"
testing.test_ml,test_model,DEBUG,2022-06-11 07:50:02,"Model on table 6 (10000000-10.csv)"
algorithms.machine_learning,find_unique_columns,DEBUG,2022-06-11 07:50:07,"Preparation: 0.011753760278224945s, prediction: 0.44373176991939545s"
testing.test_ml,test_model,DEBUG,2022-06-11 07:50:20,"Model on table 7 (100000000-10.csv)"
algorithms.machine_learning,find_unique_columns,DEBUG,2022-06-11 07:51:12,"Preparation: 0.011601381003856659s, prediction: 0.43465498089790344s"
testing.test_ml,test_model,DEBUG,2022-06-11 07:54:03,"Model on table 8 (5000000-10.csv)"
algorithms.machine_learning,find_unique_columns,DEBUG,2022-06-11 07:54:06,"Preparation: 0.011752545833587646s, prediction: 0.44210827723145485s"
testing.test_ml,test_model,DEBUG,2022-06-11 07:54:12,"Model on table 9 (50000000-10.csv)"
algorithms.machine_learning,find_unique_columns,DEBUG,2022-06-11 07:54:39,"Preparation: 0.01146041601896286s, prediction: 0.4346485882997513s"
testing.test_ml,test_model,DEBUG,2022-06-11 07:55:55,"Naive algorithm on table 1 (100-10.csv)"
testing.test_ml,test_model,DEBUG,2022-06-11 07:55:55,"Naive algorithm on table 2 (1000-10.csv)"
testing.test_ml,test_model,DEBUG,2022-06-11 07:55:55,"Naive algorithm on table 3 (10000-10.csv)"
testing.test_ml,test_model,DEBUG,2022-06-11 07:55:55,"Naive algorithm on table 4 (100000-10.csv)"
testing.test_ml,test_model,DEBUG,2022-06-11 07:55:56,"Naive algorithm on table 5 (1000000-10.csv)"
testing.test_ml,test_model,DEBUG,2022-06-11 07:56:01,"Naive algorithm on table 6 (10000000-10.csv)"
testing.test_ml,test_model,DEBUG,2022-06-11 07:57:09,"Naive algorithm on table 7 (100000000-10.csv)"
testing.test_ml,test_model,DEBUG,2022-06-11 08:12:17,"Naive algorithm on table 8 (5000000-10.csv)"
testing.test_ml,test_model,DEBUG,2022-06-11 08:12:49,"Naive algorithm on table 9 (50000000-10.csv)"
testing.test_ml,test_model,INFO,2022-06-11 08:19:36,"Finished testing"
__main__,random_int,INFO,2022-06-11 08:19:36,"Finished random_int test"
__main__,random_int,INFO,2022-06-11 08:19:36,"Started random_int test with filetype parquet and a maximum of 100,000,000 rows (small_table=True, 90% nuniques)"
testing.test_ml,generate_random_int_dataframe,DEBUG,2022-06-11 08:19:36,"Generating random_int table with 100 rows and 10 columns (90% nuniques)"
testing.test_ml,generate_random_int_dataframe,DEBUG,2022-06-11 08:19:36,"Generating random_int table with 1,000 rows and 10 columns (90% nuniques)"
testing.test_ml,generate_random_int_dataframe,DEBUG,2022-06-11 08:19:36,"Generating random_int table with 10,000 rows and 10 columns (90% nuniques)"
testing.test_ml,generate_random_int_dataframe,DEBUG,2022-06-11 08:19:36,"Generating random_int table with 100,000 rows and 10 columns (90% nuniques)"
testing.test_ml,generate_random_int_dataframe,DEBUG,2022-06-11 08:19:36,"Generating random_int table with 1,000,000 rows and 10 columns (90% nuniques)"
testing.test_ml,generate_random_int_dataframe,DEBUG,2022-06-11 08:19:39,"Generating random_int table with 5,000,000 rows and 10 columns (90% nuniques)"
testing.test_ml,generate_random_int_dataframe,DEBUG,2022-06-11 08:19:56,"Generating random_int table with 10,000,000 rows and 10 columns (90% nuniques)"
testing.test_ml,generate_random_int_dataframe,DEBUG,2022-06-11 08:20:29,"Generating random_int table with 50,000,000 rows and 10 columns (90% nuniques)"
testing.test_ml,generate_random_int_dataframe,DEBUG,2022-06-11 08:23:15,"Generating random_int table with 100,000,000 rows and 10 columns (90% nuniques)"
testing.test_ml,test_model,INFO,2022-06-11 08:28:44,"Started testing of a model with 10 rows"
testing.test_ml,test_model,DEBUG,2022-06-11 08:28:45,"Model on table 1 (100-10.parquet)"
algorithms.machine_learning,find_unique_columns,DEBUG,2022-06-11 08:28:45,"Preparation: 0.010067563503980637s, prediction: 0.43391864001750946s"
testing.test_ml,test_model,DEBUG,2022-06-11 08:28:45,"Model on table 2 (1000-10.parquet)"
algorithms.machine_learning,find_unique_columns,DEBUG,2022-06-11 08:28:46,"Preparation: 0.009881716221570969s, prediction: 0.4354519806802273s"
testing.test_ml,test_model,DEBUG,2022-06-11 08:28:46,"Model on table 3 (10000-10.parquet)"
algorithms.machine_learning,find_unique_columns,DEBUG,2022-06-11 08:28:46,"Preparation: 0.0099746473133564s, prediction: 0.43006449192762375s"
testing.test_ml,test_model,DEBUG,2022-06-11 08:28:46,"Model on table 4 (100000-10.parquet)"
algorithms.machine_learning,find_unique_columns,DEBUG,2022-06-11 08:28:47,"Preparation: 0.010085396468639374s, prediction: 0.44041920453310013s"
testing.test_ml,test_model,DEBUG,2022-06-11 08:28:47,"Model on table 5 (1000000-10.parquet)"
algorithms.machine_learning,find_unique_columns,DEBUG,2022-06-11 08:28:47,"Preparation: 0.010216347873210907s, prediction: 0.4353053830564022s"
testing.test_ml,test_model,DEBUG,2022-06-11 08:28:48,"Model on table 6 (10000000-10.parquet)"
algorithms.machine_learning,find_unique_columns,DEBUG,2022-06-11 08:28:49,"Preparation: 0.010482154786586761s, prediction: 0.8787534907460213s"
testing.test_ml,test_model,DEBUG,2022-06-11 08:28:55,"Model on table 7 (100000000-10.parquet)"
algorithms.machine_learning,find_unique_columns,DEBUG,2022-06-11 08:28:57,"Preparation: 0.010191045701503754s, prediction: 0.4330028295516968s"
testing.test_ml,test_model,DEBUG,2022-06-11 08:30:25,"Model on table 8 (5000000-10.parquet)"
algorithms.machine_learning,find_unique_columns,DEBUG,2022-06-11 08:30:26,"Preparation: 0.01052536815404892s, prediction: 0.9984477460384369s"
testing.test_ml,test_model,DEBUG,2022-06-11 08:30:29,"Model on table 9 (50000000-10.parquet)"
algorithms.machine_learning,find_unique_columns,DEBUG,2022-06-11 08:30:31,"Preparation: 0.0102572962641716s, prediction: 0.7214624136686325s"
testing.test_ml,test_model,DEBUG,2022-06-11 08:31:10,"Naive algorithm on table 1 (100-10.parquet)"
testing.test_ml,test_model,DEBUG,2022-06-11 08:31:10,"Naive algorithm on table 2 (1000-10.parquet)"
testing.test_ml,test_model,DEBUG,2022-06-11 08:31:10,"Naive algorithm on table 3 (10000-10.parquet)"
testing.test_ml,test_model,DEBUG,2022-06-11 08:31:10,"Naive algorithm on table 4 (100000-10.parquet)"
testing.test_ml,test_model,DEBUG,2022-06-11 08:31:10,"Naive algorithm on table 5 (1000000-10.parquet)"
testing.test_ml,test_model,DEBUG,2022-06-11 08:31:15,"Naive algorithm on table 6 (10000000-10.parquet)"
testing.test_ml,test_model,DEBUG,2022-06-11 08:32:19,"Naive algorithm on table 7 (100000000-10.parquet)"
testing.test_ml,test_model,DEBUG,2022-06-11 08:46:40,"Naive algorithm on table 8 (5000000-10.parquet)"
testing.test_ml,test_model,DEBUG,2022-06-11 08:47:10,"Naive algorithm on table 9 (50000000-10.parquet)"
testing.test_ml,test_model,INFO,2022-06-11 08:53:34,"Finished testing"
__main__,random_int,INFO,2022-06-11 08:53:34,"Finished random_int test"
__main__,random_int,INFO,2022-06-11 08:53:34,"Started random_int test with filetype parquet and a maximum of 100,000,000 rows (small_table=False, 90% nuniques)"
testing.test_ml,test_model,INFO,2022-06-11 08:53:34,"Started testing of a model with 10 rows"
testing.test_ml,test_model,DEBUG,2022-06-11 08:53:34,"Model on table 1 (100-10.parquet)"
algorithms.machine_learning,find_unique_columns,DEBUG,2022-06-11 08:53:35,"Preparation: 0.009906813502311707s, prediction: 0.4551767483353615s"
testing.test_ml,test_model,DEBUG,2022-06-11 08:53:35,"Model on table 2 (1000-10.parquet)"
algorithms.machine_learning,find_unique_columns,DEBUG,2022-06-11 08:53:35,"Preparation: 0.009964656084775925s, prediction: 0.44887394458055496s"
testing.test_ml,test_model,DEBUG,2022-06-11 08:53:35,"Model on table 3 (10000-10.parquet)"
algorithms.machine_learning,find_unique_columns,DEBUG,2022-06-11 08:53:36,"Preparation: 0.01016758382320404s, prediction: 0.4444027245044708s"
testing.test_ml,test_model,DEBUG,2022-06-11 08:53:36,"Model on table 4 (100000-10.parquet)"
algorithms.machine_learning,find_unique_columns,DEBUG,2022-06-11 08:53:36,"Preparation: 0.010280385613441467s, prediction: 0.450653251260519s"
testing.test_ml,test_model,DEBUG,2022-06-11 08:53:36,"Model on table 5 (1000000-10.parquet)"
algorithms.machine_learning,find_unique_columns,DEBUG,2022-06-11 08:53:37,"Preparation: 0.01044207438826561s, prediction: 0.4495893679559231s"
testing.test_ml,test_model,DEBUG,2022-06-11 08:53:37,"Model on table 6 (10000000-10.parquet)"
algorithms.machine_learning,find_unique_columns,DEBUG,2022-06-11 08:53:38,"Preparation: 0.00992082804441452s, prediction: 0.7809086106717587s"
testing.test_ml,test_model,DEBUG,2022-06-11 08:53:45,"Model on table 7 (100000000-10.parquet)"
algorithms.machine_learning,find_unique_columns,DEBUG,2022-06-11 08:53:50,"Preparation: 0.010418456047773361s, prediction: 0.4579111337661743s"
testing.test_ml,test_model,DEBUG,2022-06-11 08:55:17,"Model on table 8 (5000000-10.parquet)"
algorithms.machine_learning,find_unique_columns,DEBUG,2022-06-11 08:55:18,"Preparation: 0.010346546769142151s, prediction: 0.7361438684165478s"
testing.test_ml,test_model,DEBUG,2022-06-11 08:55:21,"Model on table 9 (50000000-10.parquet)"
algorithms.machine_learning,find_unique_columns,DEBUG,2022-06-11 08:55:24,"Preparation: 0.01052698865532875s, prediction: 1.047418735921383s"
testing.test_ml,test_model,DEBUG,2022-06-11 08:56:02,"Naive algorithm on table 1 (100-10.parquet)"
testing.test_ml,test_model,DEBUG,2022-06-11 08:56:02,"Naive algorithm on table 2 (1000-10.parquet)"
testing.test_ml,test_model,DEBUG,2022-06-11 08:56:02,"Naive algorithm on table 3 (10000-10.parquet)"
testing.test_ml,test_model,DEBUG,2022-06-11 08:56:02,"Naive algorithm on table 4 (100000-10.parquet)"
testing.test_ml,test_model,DEBUG,2022-06-11 08:56:03,"Naive algorithm on table 5 (1000000-10.parquet)"
testing.test_ml,test_model,DEBUG,2022-06-11 08:56:07,"Naive algorithm on table 6 (10000000-10.parquet)"
testing.test_ml,test_model,DEBUG,2022-06-11 08:57:11,"Naive algorithm on table 7 (100000000-10.parquet)"
testing.test_ml,test_model,DEBUG,2022-06-11 09:11:32,"Naive algorithm on table 8 (5000000-10.parquet)"
testing.test_ml,test_model,DEBUG,2022-06-11 09:12:01,"Naive algorithm on table 9 (50000000-10.parquet)"
testing.test_ml,test_model,INFO,2022-06-11 09:18:23,"Finished testing"
__main__,random_int,INFO,2022-06-11 09:18:23,"Finished random_int test"
__main__,random_int,INFO,2022-06-11 09:18:23,"Started random_int test with filetype csv and a maximum of 100,000,000 rows (small_table=False, 90% nuniques)"
testing.test_ml,generate_random_int_dataframe,DEBUG,2022-06-11 09:18:23,"Generating random_int table with 100 rows and 10 columns (90% nuniques)"
testing.test_ml,generate_random_int_dataframe,DEBUG,2022-06-11 09:18:23,"Generating random_int table with 1,000 rows and 10 columns (90% nuniques)"
testing.test_ml,generate_random_int_dataframe,DEBUG,2022-06-11 09:18:23,"Generating random_int table with 10,000 rows and 10 columns (90% nuniques)"
testing.test_ml,generate_random_int_dataframe,DEBUG,2022-06-11 09:18:23,"Generating random_int table with 100,000 rows and 10 columns (90% nuniques)"
testing.test_ml,generate_random_int_dataframe,DEBUG,2022-06-11 09:18:24,"Generating random_int table with 1,000,000 rows and 10 columns (90% nuniques)"
testing.test_ml,generate_random_int_dataframe,DEBUG,2022-06-11 09:18:28,"Generating random_int table with 5,000,000 rows and 10 columns (90% nuniques)"
testing.test_ml,generate_random_int_dataframe,DEBUG,2022-06-11 09:18:53,"Generating random_int table with 10,000,000 rows and 10 columns (90% nuniques)"
testing.test_ml,generate_random_int_dataframe,DEBUG,2022-06-11 09:19:48,"Generating random_int table with 50,000,000 rows and 10 columns (90% nuniques)"
testing.test_ml,generate_random_int_dataframe,DEBUG,2022-06-11 09:24:31,"Generating random_int table with 100,000,000 rows and 10 columns (90% nuniques)"
testing.test_ml,test_model,INFO,2022-06-11 09:34:00,"Started testing of a model with 10 rows"
testing.test_ml,test_model,DEBUG,2022-06-11 09:34:00,"Model on table 1 (100-10.csv)"
algorithms.machine_learning,find_unique_columns,DEBUG,2022-06-11 09:34:01,"Preparation: 0.009781267493963242s, prediction: 0.44795743003487587s"
testing.test_ml,test_model,DEBUG,2022-06-11 09:34:01,"Model on table 2 (1000-10.csv)"
algorithms.machine_learning,find_unique_columns,DEBUG,2022-06-11 09:34:01,"Preparation: 0.01020459458231926s, prediction: 0.4385477602481842s"
testing.test_ml,test_model,DEBUG,2022-06-11 09:34:01,"Model on table 3 (10000-10.csv)"
algorithms.machine_learning,find_unique_columns,DEBUG,2022-06-11 09:34:02,"Preparation: 0.010309536010026932s, prediction: 0.4431322477757931s"
testing.test_ml,test_model,DEBUG,2022-06-11 09:34:02,"Model on table 4 (100000-10.csv)"
algorithms.machine_learning,find_unique_columns,DEBUG,2022-06-11 09:34:02,"Preparation: 0.010782614350318909s, prediction: 0.436679158359766s"
testing.test_ml,test_model,DEBUG,2022-06-11 09:34:02,"Model on table 5 (1000000-10.csv)"
algorithms.machine_learning,find_unique_columns,DEBUG,2022-06-11 09:34:03,"Preparation: 0.010504867881536484s, prediction: 0.43025171756744385s"
testing.test_ml,test_model,DEBUG,2022-06-11 09:34:04,"Model on table 6 (10000000-10.csv)"
algorithms.machine_learning,find_unique_columns,DEBUG,2022-06-11 09:34:09,"Preparation: 0.010789785534143448s, prediction: 0.4389510117471218s"
testing.test_ml,test_model,DEBUG,2022-06-11 09:34:15,"Model on table 7 (100000000-10.csv)"
algorithms.machine_learning,find_unique_columns,DEBUG,2022-06-11 09:35:07,"Preparation: 0.010514624416828156s, prediction: 0.5266719721257687s"
testing.test_ml,test_model,DEBUG,2022-06-11 09:36:32,"Model on table 8 (5000000-10.csv)"
algorithms.machine_learning,find_unique_columns,DEBUG,2022-06-11 09:36:35,"Preparation: 0.01062547042965889s, prediction: 0.43139733746647835s"
testing.test_ml,test_model,DEBUG,2022-06-11 09:36:38,"Model on table 9 (50000000-10.csv)"
algorithms.machine_learning,find_unique_columns,DEBUG,2022-06-11 09:37:06,"Preparation: 0.010490689426660538s, prediction: 0.4274170733988285s"
testing.test_ml,test_model,DEBUG,2022-06-11 09:37:44,"Naive algorithm on table 1 (100-10.csv)"
testing.test_ml,test_model,DEBUG,2022-06-11 09:37:44,"Naive algorithm on table 2 (1000-10.csv)"
testing.test_ml,test_model,DEBUG,2022-06-11 09:37:44,"Naive algorithm on table 3 (10000-10.csv)"
testing.test_ml,test_model,DEBUG,2022-06-11 09:37:44,"Naive algorithm on table 4 (100000-10.csv)"
testing.test_ml,test_model,DEBUG,2022-06-11 09:37:44,"Naive algorithm on table 5 (1000000-10.csv)"
testing.test_ml,test_model,DEBUG,2022-06-11 09:37:49,"Naive algorithm on table 6 (10000000-10.csv)"
testing.test_ml,test_model,DEBUG,2022-06-11 09:38:58,"Naive algorithm on table 7 (100000000-10.csv)"
testing.test_ml,test_model,DEBUG,2022-06-11 09:54:06,"Naive algorithm on table 8 (5000000-10.csv)"
testing.test_ml,test_model,DEBUG,2022-06-11 09:54:38,"Naive algorithm on table 9 (50000000-10.csv)"
testing.test_ml,test_model,INFO,2022-06-11 10:01:27,"Finished testing"
__main__,random_int,INFO,2022-06-11 10:01:27,"Finished random_int test"
__main__,random_int,INFO,2022-06-11 10:01:27,"Started random_int test with filetype parquet and a maximum of 100,000,000 rows (small_table=True, 60% nuniques)"
testing.test_ml,generate_random_int_dataframe,DEBUG,2022-06-11 10:01:27,"Generating random_int table with 100 rows and 10 columns (60% nuniques)"
testing.test_ml,generate_random_int_dataframe,DEBUG,2022-06-11 10:01:27,"Generating random_int table with 1,000 rows and 10 columns (60% nuniques)"
testing.test_ml,generate_random_int_dataframe,DEBUG,2022-06-11 10:01:27,"Generating random_int table with 10,000 rows and 10 columns (60% nuniques)"
testing.test_ml,generate_random_int_dataframe,DEBUG,2022-06-11 10:01:27,"Generating random_int table with 100,000 rows and 10 columns (60% nuniques)"
testing.test_ml,generate_random_int_dataframe,DEBUG,2022-06-11 10:01:28,"Generating random_int table with 1,000,000 rows and 10 columns (60% nuniques)"
testing.test_ml,generate_random_int_dataframe,DEBUG,2022-06-11 10:01:30,"Generating random_int table with 5,000,000 rows and 10 columns (60% nuniques)"
testing.test_ml,generate_random_int_dataframe,DEBUG,2022-06-11 10:01:44,"Generating random_int table with 10,000,000 rows and 10 columns (60% nuniques)"
testing.test_ml,generate_random_int_dataframe,DEBUG,2022-06-11 10:02:17,"Generating random_int table with 50,000,000 rows and 10 columns (60% nuniques)"
testing.test_ml,generate_random_int_dataframe,DEBUG,2022-06-11 10:05:03,"Generating random_int table with 100,000,000 rows and 10 columns (60% nuniques)"
testing.test_ml,test_model,INFO,2022-06-11 10:10:28,"Started testing of a model with 20 rows"
testing.test_ml,test_model,DEBUG,2022-06-11 10:10:30,"Model on table 1 (100-10.parquet)"
algorithms.machine_learning,find_unique_columns,DEBUG,2022-06-11 10:10:32,"Preparation: 0.01325272023677826s, prediction: 1.9291104674339294s"
testing.test_ml,test_model,DEBUG,2022-06-11 10:10:32,"Model on table 2 (1000-10.parquet)"
algorithms.machine_learning,find_unique_columns,DEBUG,2022-06-11 10:10:33,"Preparation: 0.013233806937932968s, prediction: 1.9042353555560112s"
testing.test_ml,test_model,DEBUG,2022-06-11 10:10:33,"Model on table 3 (10000-10.parquet)"
algorithms.machine_learning,find_unique_columns,DEBUG,2022-06-11 10:10:35,"Preparation: 0.013183604925870895s, prediction: 1.9112654998898506s"
testing.test_ml,test_model,DEBUG,2022-06-11 10:10:35,"Model on table 4 (100000-10.parquet)"
algorithms.machine_learning,find_unique_columns,DEBUG,2022-06-11 10:10:37,"Preparation: 0.013038605451583862s, prediction: 1.9108582101762295s"
testing.test_ml,test_model,DEBUG,2022-06-11 10:10:37,"Model on table 5 (1000000-10.parquet)"
algorithms.machine_learning,find_unique_columns,DEBUG,2022-06-11 10:10:39,"Preparation: 0.013225898146629333s, prediction: 1.9109799601137638s"
testing.test_ml,test_model,DEBUG,2022-06-11 10:10:41,"Model on table 6 (10000000-10.parquet)"
algorithms.machine_learning,find_unique_columns,DEBUG,2022-06-11 10:10:43,"Preparation: 0.013434968888759613s, prediction: 1.8991713635623455s"
testing.test_ml,test_model,DEBUG,2022-06-11 10:11:09,"Model on table 7 (100000000-10.parquet)"
algorithms.machine_learning,find_unique_columns,DEBUG,2022-06-11 10:11:13,"Preparation: 0.013635039329528809s, prediction: 1.915904026478529s"
testing.test_ml,test_model,DEBUG,2022-06-11 10:16:59,"Model on table 8 (5000000-10.parquet)"
algorithms.machine_learning,find_unique_columns,DEBUG,2022-06-11 10:17:01,"Preparation: 0.013620492070913315s, prediction: 1.9066973589360714s"
testing.test_ml,test_model,DEBUG,2022-06-11 10:17:13,"Model on table 9 (50000000-10.parquet)"
algorithms.machine_learning,find_unique_columns,DEBUG,2022-06-11 10:17:16,"Preparation: 0.013394977897405624s, prediction: 1.9023564346134663s"
testing.test_ml,test_model,DEBUG,2022-06-11 10:19:50,"Naive algorithm on table 1 (100-10.parquet)"
testing.test_ml,test_model,DEBUG,2022-06-11 10:19:50,"Naive algorithm on table 2 (1000-10.parquet)"
testing.test_ml,test_model,DEBUG,2022-06-11 10:19:50,"Naive algorithm on table 3 (10000-10.parquet)"
testing.test_ml,test_model,DEBUG,2022-06-11 10:19:50,"Naive algorithm on table 4 (100000-10.parquet)"
testing.test_ml,test_model,DEBUG,2022-06-11 10:19:50,"Naive algorithm on table 5 (1000000-10.parquet)"
testing.test_ml,test_model,DEBUG,2022-06-11 10:19:55,"Naive algorithm on table 6 (10000000-10.parquet)"
testing.test_ml,test_model,DEBUG,2022-06-11 10:20:58,"Naive algorithm on table 7 (100000000-10.parquet)"
testing.test_ml,test_model,DEBUG,2022-06-11 10:35:23,"Naive algorithm on table 8 (5000000-10.parquet)"
testing.test_ml,test_model,DEBUG,2022-06-11 10:35:53,"Naive algorithm on table 9 (50000000-10.parquet)"
testing.test_ml,test_model,INFO,2022-06-11 10:42:17,"Finished testing"
__main__,random_int,INFO,2022-06-11 10:42:17,"Finished random_int test"
__main__,random_int,INFO,2022-06-11 10:42:17,"Started random_int test with filetype parquet and a maximum of 100,000,000 rows (small_table=False, 60% nuniques)"
testing.test_ml,test_model,INFO,2022-06-11 10:42:17,"Started testing of a model with 20 rows"
testing.test_ml,test_model,DEBUG,2022-06-11 10:42:18,"Model on table 1 (100-10.parquet)"
algorithms.machine_learning,find_unique_columns,DEBUG,2022-06-11 10:42:20,"Preparation: 0.012932252138853073s, prediction: 1.8841443844139576s"
testing.test_ml,test_model,DEBUG,2022-06-11 10:42:20,"Model on table 2 (1000-10.parquet)"
algorithms.machine_learning,find_unique_columns,DEBUG,2022-06-11 10:42:22,"Preparation: 0.012869123369455338s, prediction: 1.8802496679127216s"
testing.test_ml,test_model,DEBUG,2022-06-11 10:42:22,"Model on table 3 (10000-10.parquet)"
algorithms.machine_learning,find_unique_columns,DEBUG,2022-06-11 10:42:24,"Preparation: 0.012733105570077896s, prediction: 1.877303782850504s"
testing.test_ml,test_model,DEBUG,2022-06-11 10:42:24,"Model on table 4 (100000-10.parquet)"
algorithms.machine_learning,find_unique_columns,DEBUG,2022-06-11 10:42:26,"Preparation: 0.012865543365478516s, prediction: 1.8852602243423462s"
testing.test_ml,test_model,DEBUG,2022-06-11 10:42:26,"Model on table 5 (1000000-10.parquet)"
algorithms.machine_learning,find_unique_columns,DEBUG,2022-06-11 10:42:28,"Preparation: 0.013631515204906464s, prediction: 1.882531825453043s"
testing.test_ml,test_model,DEBUG,2022-06-11 10:42:30,"Model on table 6 (10000000-10.parquet)"
algorithms.machine_learning,find_unique_columns,DEBUG,2022-06-11 10:42:32,"Preparation: 0.013551946729421616s, prediction: 1.8985676988959312s"
testing.test_ml,test_model,DEBUG,2022-06-11 10:42:58,"Model on table 7 (100000000-10.parquet)"
algorithms.machine_learning,find_unique_columns,DEBUG,2022-06-11 10:43:04,"Preparation: 0.013817839324474335s, prediction: 1.906030047684908s"
testing.test_ml,test_model,DEBUG,2022-06-11 10:48:48,"Model on table 8 (5000000-10.parquet)"
algorithms.machine_learning,find_unique_columns,DEBUG,2022-06-11 10:48:50,"Preparation: 0.013735167682170868s, prediction: 1.9037857726216316s"
testing.test_ml,test_model,DEBUG,2022-06-11 10:49:02,"Model on table 9 (50000000-10.parquet)"
algorithms.machine_learning,find_unique_columns,DEBUG,2022-06-11 10:49:06,"Preparation: 0.013898119330406189s, prediction: 2.149347446858883s"
testing.test_ml,test_model,DEBUG,2022-06-11 10:51:39,"Naive algorithm on table 1 (100-10.parquet)"
testing.test_ml,test_model,DEBUG,2022-06-11 10:51:39,"Naive algorithm on table 2 (1000-10.parquet)"
testing.test_ml,test_model,DEBUG,2022-06-11 10:51:39,"Naive algorithm on table 3 (10000-10.parquet)"
testing.test_ml,test_model,DEBUG,2022-06-11 10:51:39,"Naive algorithm on table 4 (100000-10.parquet)"
testing.test_ml,test_model,DEBUG,2022-06-11 10:51:39,"Naive algorithm on table 5 (1000000-10.parquet)"
testing.test_ml,test_model,DEBUG,2022-06-11 10:51:44,"Naive algorithm on table 6 (10000000-10.parquet)"
testing.test_ml,test_model,DEBUG,2022-06-11 10:52:48,"Naive algorithm on table 7 (100000000-10.parquet)"
testing.test_ml,test_model,DEBUG,2022-06-11 11:07:13,"Naive algorithm on table 8 (5000000-10.parquet)"
testing.test_ml,test_model,DEBUG,2022-06-11 11:07:42,"Naive algorithm on table 9 (50000000-10.parquet)"
testing.test_ml,test_model,INFO,2022-06-11 11:14:08,"Finished testing"
__main__,random_int,INFO,2022-06-11 11:14:08,"Finished random_int test"
__main__,random_int,INFO,2022-06-11 11:14:08,"Started random_int test with filetype csv and a maximum of 100,000,000 rows (small_table=False, 60% nuniques)"
testing.test_ml,generate_random_int_dataframe,DEBUG,2022-06-11 11:14:08,"Generating random_int table with 100 rows and 10 columns (60% nuniques)"
testing.test_ml,generate_random_int_dataframe,DEBUG,2022-06-11 11:14:08,"Generating random_int table with 1,000 rows and 10 columns (60% nuniques)"
testing.test_ml,generate_random_int_dataframe,DEBUG,2022-06-11 11:14:08,"Generating random_int table with 10,000 rows and 10 columns (60% nuniques)"
testing.test_ml,generate_random_int_dataframe,DEBUG,2022-06-11 11:14:08,"Generating random_int table with 100,000 rows and 10 columns (60% nuniques)"
testing.test_ml,generate_random_int_dataframe,DEBUG,2022-06-11 11:14:09,"Generating random_int table with 1,000,000 rows and 10 columns (60% nuniques)"
testing.test_ml,generate_random_int_dataframe,DEBUG,2022-06-11 11:14:15,"Generating random_int table with 5,000,000 rows and 10 columns (60% nuniques)"
testing.test_ml,generate_random_int_dataframe,DEBUG,2022-06-11 11:14:44,"Generating random_int table with 10,000,000 rows and 10 columns (60% nuniques)"
testing.test_ml,generate_random_int_dataframe,DEBUG,2022-06-11 11:15:40,"Generating random_int table with 50,000,000 rows and 10 columns (60% nuniques)"
testing.test_ml,generate_random_int_dataframe,DEBUG,2022-06-11 11:20:23,"Generating random_int table with 100,000,000 rows and 10 columns (60% nuniques)"
testing.test_ml,test_model,INFO,2022-06-11 11:29:45,"Started testing of a model with 20 rows"
testing.test_ml,test_model,DEBUG,2022-06-11 11:29:46,"Model on table 1 (100-10.csv)"
algorithms.machine_learning,find_unique_columns,DEBUG,2022-06-11 11:29:48,"Preparation: 0.013323910534381866s, prediction: 1.8910525292158127s"
testing.test_ml,test_model,DEBUG,2022-06-11 11:29:48,"Model on table 2 (1000-10.csv)"
algorithms.machine_learning,find_unique_columns,DEBUG,2022-06-11 11:29:50,"Preparation: 0.012833815068006516s, prediction: 1.8750744797289371s"
testing.test_ml,test_model,DEBUG,2022-06-11 11:29:50,"Model on table 3 (10000-10.csv)"
algorithms.machine_learning,find_unique_columns,DEBUG,2022-06-11 11:29:52,"Preparation: 0.012996003031730652s, prediction: 1.8857293352484703s"
testing.test_ml,test_model,DEBUG,2022-06-11 11:29:52,"Model on table 4 (100000-10.csv)"
algorithms.machine_learning,find_unique_columns,DEBUG,2022-06-11 11:29:54,"Preparation: 0.013437405228614807s, prediction: 1.8882009983062744s"
testing.test_ml,test_model,DEBUG,2022-06-11 11:29:54,"Model on table 5 (1000000-10.csv)"
algorithms.machine_learning,find_unique_columns,DEBUG,2022-06-11 11:29:57,"Preparation: 0.013488326221704483s, prediction: 1.8827418722212315s"
testing.test_ml,test_model,DEBUG,2022-06-11 11:29:58,"Model on table 6 (10000000-10.csv)"
algorithms.machine_learning,find_unique_columns,DEBUG,2022-06-11 11:30:05,"Preparation: 0.013577360659837723s, prediction: 1.8816446848213673s"
testing.test_ml,test_model,DEBUG,2022-06-11 11:30:30,"Model on table 7 (100000000-10.csv)"
algorithms.machine_learning,find_unique_columns,DEBUG,2022-06-11 11:31:24,"Preparation: 0.013606596738100052s, prediction: 1.8819798603653908s"
testing.test_ml,test_model,DEBUG,2022-06-11 11:37:07,"Model on table 8 (5000000-10.csv)"
algorithms.machine_learning,find_unique_columns,DEBUG,2022-06-11 11:37:11,"Preparation: 0.013858586549758911s, prediction: 1.879700779914856s"
testing.test_ml,test_model,DEBUG,2022-06-11 11:37:23,"Model on table 9 (50000000-10.csv)"
algorithms.machine_learning,find_unique_columns,DEBUG,2022-06-11 11:37:52,"Preparation: 0.013585638254880905s, prediction: 1.8797342106699944s"
testing.test_ml,test_model,DEBUG,2022-06-11 11:40:24,"Naive algorithm on table 1 (100-10.csv)"
testing.test_ml,test_model,DEBUG,2022-06-11 11:40:24,"Naive algorithm on table 2 (1000-10.csv)"
testing.test_ml,test_model,DEBUG,2022-06-11 11:40:24,"Naive algorithm on table 3 (10000-10.csv)"
testing.test_ml,test_model,DEBUG,2022-06-11 11:40:24,"Naive algorithm on table 4 (100000-10.csv)"
testing.test_ml,test_model,DEBUG,2022-06-11 11:40:24,"Naive algorithm on table 5 (1000000-10.csv)"
testing.test_ml,test_model,DEBUG,2022-06-11 11:40:29,"Naive algorithm on table 6 (10000000-10.csv)"
testing.test_ml,test_model,DEBUG,2022-06-11 11:41:37,"Naive algorithm on table 7 (100000000-10.csv)"
testing.test_ml,test_model,DEBUG,2022-06-11 11:56:44,"Naive algorithm on table 8 (5000000-10.csv)"
testing.test_ml,test_model,DEBUG,2022-06-11 11:57:16,"Naive algorithm on table 9 (50000000-10.csv)"
testing.test_ml,test_model,INFO,2022-06-11 12:04:05,"Finished testing"
__main__,random_int,INFO,2022-06-11 12:04:05,"Finished random_int test"
__main__,random_int,INFO,2022-06-11 12:04:05,"Started random_int test with filetype parquet and a maximum of 100,000,000 rows (small_table=True, 70% nuniques)"
testing.test_ml,generate_random_int_dataframe,DEBUG,2022-06-11 12:04:05,"Generating random_int table with 100 rows and 10 columns (70% nuniques)"
testing.test_ml,generate_random_int_dataframe,DEBUG,2022-06-11 12:04:05,"Generating random_int table with 1,000 rows and 10 columns (70% nuniques)"
testing.test_ml,generate_random_int_dataframe,DEBUG,2022-06-11 12:04:05,"Generating random_int table with 10,000 rows and 10 columns (70% nuniques)"
testing.test_ml,generate_random_int_dataframe,DEBUG,2022-06-11 12:04:05,"Generating random_int table with 100,000 rows and 10 columns (70% nuniques)"
testing.test_ml,generate_random_int_dataframe,DEBUG,2022-06-11 12:04:06,"Generating random_int table with 1,000,000 rows and 10 columns (70% nuniques)"
testing.test_ml,generate_random_int_dataframe,DEBUG,2022-06-11 12:04:09,"Generating random_int table with 5,000,000 rows and 10 columns (70% nuniques)"
testing.test_ml,generate_random_int_dataframe,DEBUG,2022-06-11 12:04:28,"Generating random_int table with 10,000,000 rows and 10 columns (70% nuniques)"
testing.test_ml,generate_random_int_dataframe,DEBUG,2022-06-11 12:05:03,"Generating random_int table with 50,000,000 rows and 10 columns (70% nuniques)"
testing.test_ml,generate_random_int_dataframe,DEBUG,2022-06-11 12:07:52,"Generating random_int table with 100,000,000 rows and 10 columns (70% nuniques)"
testing.test_ml,test_model,INFO,2022-06-11 12:13:35,"Started testing of a model with 20 rows"
testing.test_ml,test_model,DEBUG,2022-06-11 12:13:36,"Model on table 1 (100-10.parquet)"
algorithms.machine_learning,find_unique_columns,DEBUG,2022-06-11 12:13:38,"Preparation: 0.012162268161773682s, prediction: 1.9329299442470074s"
testing.test_ml,test_model,DEBUG,2022-06-11 12:13:38,"Model on table 2 (1000-10.parquet)"
algorithms.machine_learning,find_unique_columns,DEBUG,2022-06-11 12:13:40,"Preparation: 0.01198916882276535s, prediction: 1.8912485018372536s"
testing.test_ml,test_model,DEBUG,2022-06-11 12:13:40,"Model on table 3 (10000-10.parquet)"
algorithms.machine_learning,find_unique_columns,DEBUG,2022-06-11 12:13:42,"Preparation: 0.01214899867773056s, prediction: 1.89371432736516s"
testing.test_ml,test_model,DEBUG,2022-06-11 12:13:42,"Model on table 4 (100000-10.parquet)"
algorithms.machine_learning,find_unique_columns,DEBUG,2022-06-11 12:13:44,"Preparation: 0.012332875281572342s, prediction: 1.8968952149152756s"
testing.test_ml,test_model,DEBUG,2022-06-11 12:13:44,"Model on table 5 (1000000-10.parquet)"
algorithms.machine_learning,find_unique_columns,DEBUG,2022-06-11 12:13:46,"Preparation: 0.012283775955438614s, prediction: 1.895742267370224s"
testing.test_ml,test_model,DEBUG,2022-06-11 12:13:47,"Model on table 6 (10000000-10.parquet)"
algorithms.machine_learning,find_unique_columns,DEBUG,2022-06-11 12:13:49,"Preparation: 0.012421082705259323s, prediction: 1.899019442498684s"
testing.test_ml,test_model,DEBUG,2022-06-11 12:14:09,"Model on table 7 (100000000-10.parquet)"
algorithms.machine_learning,find_unique_columns,DEBUG,2022-06-11 12:14:12,"Preparation: 0.012098677456378937s, prediction: 1.888989582657814s"
testing.test_ml,test_model,DEBUG,2022-06-11 12:18:28,"Model on table 8 (5000000-10.parquet)"
algorithms.machine_learning,find_unique_columns,DEBUG,2022-06-11 12:18:30,"Preparation: 0.012760892510414124s, prediction: 1.8798812627792358s"
testing.test_ml,test_model,DEBUG,2022-06-11 12:18:39,"Model on table 9 (50000000-10.parquet)"
algorithms.machine_learning,find_unique_columns,DEBUG,2022-06-11 12:18:42,"Preparation: 0.012145105749368668s, prediction: 1.8752940148115158s"
testing.test_ml,test_model,DEBUG,2022-06-11 12:20:38,"Naive algorithm on table 1 (100-10.parquet)"
testing.test_ml,test_model,DEBUG,2022-06-11 12:20:38,"Naive algorithm on table 2 (1000-10.parquet)"
testing.test_ml,test_model,DEBUG,2022-06-11 12:20:38,"Naive algorithm on table 3 (10000-10.parquet)"
testing.test_ml,test_model,DEBUG,2022-06-11 12:20:38,"Naive algorithm on table 4 (100000-10.parquet)"
testing.test_ml,test_model,DEBUG,2022-06-11 12:20:38,"Naive algorithm on table 5 (1000000-10.parquet)"
testing.test_ml,test_model,DEBUG,2022-06-11 12:20:43,"Naive algorithm on table 6 (10000000-10.parquet)"
testing.test_ml,test_model,DEBUG,2022-06-11 12:21:47,"Naive algorithm on table 7 (100000000-10.parquet)"
testing.test_ml,test_model,DEBUG,2022-06-11 12:36:09,"Naive algorithm on table 8 (5000000-10.parquet)"
testing.test_ml,test_model,DEBUG,2022-06-11 12:36:38,"Naive algorithm on table 9 (50000000-10.parquet)"
testing.test_ml,test_model,INFO,2022-06-11 12:43:00,"Finished testing"
__main__,random_int,INFO,2022-06-11 12:43:00,"Finished random_int test"
__main__,random_int,INFO,2022-06-11 12:43:00,"Started random_int test with filetype parquet and a maximum of 100,000,000 rows (small_table=False, 70% nuniques)"
testing.test_ml,test_model,INFO,2022-06-11 12:43:00,"Started testing of a model with 20 rows"
testing.test_ml,test_model,DEBUG,2022-06-11 12:43:02,"Model on table 1 (100-10.parquet)"
algorithms.machine_learning,find_unique_columns,DEBUG,2022-06-11 12:43:04,"Preparation: 0.012074679136276245s, prediction: 1.878330484032631s"
testing.test_ml,test_model,DEBUG,2022-06-11 12:43:04,"Model on table 2 (1000-10.parquet)"
algorithms.machine_learning,find_unique_columns,DEBUG,2022-06-11 12:43:05,"Preparation: 0.012085556983947754s, prediction: 1.8741832859814167s"
testing.test_ml,test_model,DEBUG,2022-06-11 12:43:05,"Model on table 3 (10000-10.parquet)"
algorithms.machine_learning,find_unique_columns,DEBUG,2022-06-11 12:43:07,"Preparation: 0.011834759265184402s, prediction: 1.8772575333714485s"
testing.test_ml,test_model,DEBUG,2022-06-11 12:43:07,"Model on table 4 (100000-10.parquet)"
algorithms.machine_learning,find_unique_columns,DEBUG,2022-06-11 12:43:09,"Preparation: 0.012217182666063309s, prediction: 1.8842265084385872s"
testing.test_ml,test_model,DEBUG,2022-06-11 12:43:09,"Model on table 5 (1000000-10.parquet)"
algorithms.machine_learning,find_unique_columns,DEBUG,2022-06-11 12:43:11,"Preparation: 0.012366414070129395s, prediction: 1.8837035335600376s"
testing.test_ml,test_model,DEBUG,2022-06-11 12:43:13,"Model on table 6 (10000000-10.parquet)"
algorithms.machine_learning,find_unique_columns,DEBUG,2022-06-11 12:43:15,"Preparation: 0.012103494256734848s, prediction: 1.8855409249663353s"
testing.test_ml,test_model,DEBUG,2022-06-11 12:43:34,"Model on table 7 (100000000-10.parquet)"
algorithms.machine_learning,find_unique_columns,DEBUG,2022-06-11 12:43:40,"Preparation: 0.012442566454410553s, prediction: 1.870549064129591s"
testing.test_ml,test_model,DEBUG,2022-06-11 12:47:58,"Model on table 8 (5000000-10.parquet)"
algorithms.machine_learning,find_unique_columns,DEBUG,2022-06-11 12:48:01,"Preparation: 0.012904297560453415s, prediction: 1.9025121964514256s"
testing.test_ml,test_model,DEBUG,2022-06-11 12:48:09,"Model on table 9 (50000000-10.parquet)"
algorithms.machine_learning,find_unique_columns,DEBUG,2022-06-11 12:48:13,"Preparation: 0.012355174869298935s, prediction: 1.8918895199894905s"
testing.test_ml,test_model,DEBUG,2022-06-11 12:50:08,"Naive algorithm on table 1 (100-10.parquet)"
testing.test_ml,test_model,DEBUG,2022-06-11 12:50:08,"Naive algorithm on table 2 (1000-10.parquet)"
testing.test_ml,test_model,DEBUG,2022-06-11 12:50:08,"Naive algorithm on table 3 (10000-10.parquet)"
testing.test_ml,test_model,DEBUG,2022-06-11 12:50:08,"Naive algorithm on table 4 (100000-10.parquet)"
testing.test_ml,test_model,DEBUG,2022-06-11 12:50:08,"Naive algorithm on table 5 (1000000-10.parquet)"
testing.test_ml,test_model,DEBUG,2022-06-11 12:50:13,"Naive algorithm on table 6 (10000000-10.parquet)"
testing.test_ml,test_model,DEBUG,2022-06-11 12:51:16,"Naive algorithm on table 7 (100000000-10.parquet)"
testing.test_ml,test_model,DEBUG,2022-06-11 13:05:37,"Naive algorithm on table 8 (5000000-10.parquet)"
testing.test_ml,test_model,DEBUG,2022-06-11 13:06:07,"Naive algorithm on table 9 (50000000-10.parquet)"
testing.test_ml,test_model,INFO,2022-06-11 13:12:30,"Finished testing"
__main__,random_int,INFO,2022-06-11 13:12:30,"Finished random_int test"
__main__,random_int,INFO,2022-06-11 13:12:30,"Started random_int test with filetype csv and a maximum of 100,000,000 rows (small_table=False, 70% nuniques)"
testing.test_ml,generate_random_int_dataframe,DEBUG,2022-06-11 13:12:30,"Generating random_int table with 100 rows and 10 columns (70% nuniques)"
testing.test_ml,generate_random_int_dataframe,DEBUG,2022-06-11 13:12:30,"Generating random_int table with 1,000 rows and 10 columns (70% nuniques)"
testing.test_ml,generate_random_int_dataframe,DEBUG,2022-06-11 13:12:30,"Generating random_int table with 10,000 rows and 10 columns (70% nuniques)"
testing.test_ml,generate_random_int_dataframe,DEBUG,2022-06-11 13:12:30,"Generating random_int table with 100,000 rows and 10 columns (70% nuniques)"
testing.test_ml,generate_random_int_dataframe,DEBUG,2022-06-11 13:12:31,"Generating random_int table with 1,000,000 rows and 10 columns (70% nuniques)"
testing.test_ml,generate_random_int_dataframe,DEBUG,2022-06-11 13:12:36,"Generating random_int table with 5,000,000 rows and 10 columns (70% nuniques)"
testing.test_ml,generate_random_int_dataframe,DEBUG,2022-06-11 13:13:00,"Generating random_int table with 10,000,000 rows and 10 columns (70% nuniques)"
testing.test_ml,generate_random_int_dataframe,DEBUG,2022-06-11 13:13:56,"Generating random_int table with 50,000,000 rows and 10 columns (70% nuniques)"
testing.test_ml,generate_random_int_dataframe,DEBUG,2022-06-11 13:18:46,"Generating random_int table with 100,000,000 rows and 10 columns (70% nuniques)"
testing.test_ml,test_model,INFO,2022-06-11 13:28:16,"Started testing of a model with 20 rows"
testing.test_ml,test_model,DEBUG,2022-06-11 13:28:18,"Model on table 1 (100-10.csv)"
algorithms.machine_learning,find_unique_columns,DEBUG,2022-06-11 13:28:20,"Preparation: 0.01215427741408348s, prediction: 1.889089647680521s"
testing.test_ml,test_model,DEBUG,2022-06-11 13:28:20,"Model on table 2 (1000-10.csv)"
algorithms.machine_learning,find_unique_columns,DEBUG,2022-06-11 13:28:22,"Preparation: 0.011955704540014267s, prediction: 1.8863185048103333s"
testing.test_ml,test_model,DEBUG,2022-06-11 13:28:22,"Model on table 3 (10000-10.csv)"
algorithms.machine_learning,find_unique_columns,DEBUG,2022-06-11 13:28:24,"Preparation: 0.012204047292470932s, prediction: 1.8971614688634872s"
testing.test_ml,test_model,DEBUG,2022-06-11 13:28:24,"Model on table 4 (100000-10.csv)"
algorithms.machine_learning,find_unique_columns,DEBUG,2022-06-11 13:28:25,"Preparation: 0.012532155960798264s, prediction: 1.8899284526705742s"
testing.test_ml,test_model,DEBUG,2022-06-11 13:28:26,"Model on table 5 (1000000-10.csv)"
algorithms.machine_learning,find_unique_columns,DEBUG,2022-06-11 13:28:28,"Preparation: 0.012443646788597107s, prediction: 1.8904619999229908s"
testing.test_ml,test_model,DEBUG,2022-06-11 13:28:29,"Model on table 6 (10000000-10.csv)"
algorithms.machine_learning,find_unique_columns,DEBUG,2022-06-11 13:28:36,"Preparation: 0.012768004089593887s, prediction: 1.8845385015010834s"
testing.test_ml,test_model,DEBUG,2022-06-11 13:28:55,"Model on table 7 (100000000-10.csv)"
algorithms.machine_learning,find_unique_columns,DEBUG,2022-06-11 13:29:49,"Preparation: 0.012722276151180267s, prediction: 1.8873570412397385s"
testing.test_ml,test_model,DEBUG,2022-06-11 13:34:07,"Model on table 8 (5000000-10.csv)"
algorithms.machine_learning,find_unique_columns,DEBUG,2022-06-11 13:34:11,"Preparation: 0.012887146323919296s, prediction: 1.885151632130146s"
testing.test_ml,test_model,DEBUG,2022-06-11 13:34:20,"Model on table 9 (50000000-10.csv)"
algorithms.machine_learning,find_unique_columns,DEBUG,2022-06-11 13:34:49,"Preparation: 0.012683268636465073s, prediction: 1.8780411183834076s"
testing.test_ml,test_model,DEBUG,2022-06-11 13:36:44,"Naive algorithm on table 1 (100-10.csv)"
testing.test_ml,test_model,DEBUG,2022-06-11 13:36:44,"Naive algorithm on table 2 (1000-10.csv)"
testing.test_ml,test_model,DEBUG,2022-06-11 13:36:44,"Naive algorithm on table 3 (10000-10.csv)"
testing.test_ml,test_model,DEBUG,2022-06-11 13:36:44,"Naive algorithm on table 4 (100000-10.csv)"
testing.test_ml,test_model,DEBUG,2022-06-11 13:36:44,"Naive algorithm on table 5 (1000000-10.csv)"
testing.test_ml,test_model,DEBUG,2022-06-11 13:36:49,"Naive algorithm on table 6 (10000000-10.csv)"
testing.test_ml,test_model,DEBUG,2022-06-11 13:37:57,"Naive algorithm on table 7 (100000000-10.csv)"
testing.test_ml,test_model,DEBUG,2022-06-11 13:53:02,"Naive algorithm on table 8 (5000000-10.csv)"
testing.test_ml,test_model,DEBUG,2022-06-11 13:53:34,"Naive algorithm on table 9 (50000000-10.csv)"
testing.test_ml,test_model,INFO,2022-06-11 14:00:20,"Finished testing"
__main__,random_int,INFO,2022-06-11 14:00:20,"Finished random_int test"
__main__,random_int,INFO,2022-06-11 14:00:20,"Started random_int test with filetype parquet and a maximum of 100,000,000 rows (small_table=True, 80% nuniques)"
testing.test_ml,generate_random_int_dataframe,DEBUG,2022-06-11 14:00:20,"Generating random_int table with 100 rows and 10 columns (80% nuniques)"
testing.test_ml,generate_random_int_dataframe,DEBUG,2022-06-11 14:00:20,"Generating random_int table with 1,000 rows and 10 columns (80% nuniques)"
testing.test_ml,generate_random_int_dataframe,DEBUG,2022-06-11 14:00:20,"Generating random_int table with 10,000 rows and 10 columns (80% nuniques)"
testing.test_ml,generate_random_int_dataframe,DEBUG,2022-06-11 14:00:20,"Generating random_int table with 100,000 rows and 10 columns (80% nuniques)"
testing.test_ml,generate_random_int_dataframe,DEBUG,2022-06-11 14:00:21,"Generating random_int table with 1,000,000 rows and 10 columns (80% nuniques)"
testing.test_ml,generate_random_int_dataframe,DEBUG,2022-06-11 14:00:23,"Generating random_int table with 5,000,000 rows and 10 columns (80% nuniques)"
testing.test_ml,generate_random_int_dataframe,DEBUG,2022-06-11 14:00:39,"Generating random_int table with 10,000,000 rows and 10 columns (80% nuniques)"
testing.test_ml,generate_random_int_dataframe,DEBUG,2022-06-11 14:01:13,"Generating random_int table with 50,000,000 rows and 10 columns (80% nuniques)"
testing.test_ml,generate_random_int_dataframe,DEBUG,2022-06-11 14:04:05,"Generating random_int table with 100,000,000 rows and 10 columns (80% nuniques)"
testing.test_ml,test_model,INFO,2022-06-11 14:09:44,"Started testing of a model with 20 rows"
testing.test_ml,test_model,DEBUG,2022-06-11 14:09:46,"Model on table 1 (100-10.parquet)"
algorithms.machine_learning,find_unique_columns,DEBUG,2022-06-11 14:09:47,"Preparation: 0.011166021227836609s, prediction: 1.9027797691524029s"
testing.test_ml,test_model,DEBUG,2022-06-11 14:09:47,"Model on table 2 (1000-10.parquet)"
algorithms.machine_learning,find_unique_columns,DEBUG,2022-06-11 14:09:49,"Preparation: 0.01093936339020729s, prediction: 1.9364015311002731s"
testing.test_ml,test_model,DEBUG,2022-06-11 14:09:49,"Model on table 3 (10000-10.parquet)"
algorithms.machine_learning,find_unique_columns,DEBUG,2022-06-11 14:09:51,"Preparation: 0.010971613228321075s, prediction: 1.8887983858585358s"
testing.test_ml,test_model,DEBUG,2022-06-11 14:09:51,"Model on table 4 (100000-10.parquet)"
algorithms.machine_learning,find_unique_columns,DEBUG,2022-06-11 14:09:53,"Preparation: 0.011123653501272202s, prediction: 1.8877620063722134s"
testing.test_ml,test_model,DEBUG,2022-06-11 14:09:53,"Model on table 5 (1000000-10.parquet)"
algorithms.machine_learning,find_unique_columns,DEBUG,2022-06-11 14:09:55,"Preparation: 0.011160783469676971s, prediction: 1.8911638893187046s"
testing.test_ml,test_model,DEBUG,2022-06-11 14:09:56,"Model on table 6 (10000000-10.parquet)"
algorithms.machine_learning,find_unique_columns,DEBUG,2022-06-11 14:09:58,"Preparation: 0.01109619066119194s, prediction: 1.890695434063673s"
testing.test_ml,test_model,DEBUG,2022-06-11 14:10:11,"Model on table 7 (100000000-10.parquet)"
algorithms.machine_learning,find_unique_columns,DEBUG,2022-06-11 14:10:15,"Preparation: 0.011304326355457306s, prediction: 1.8933205679059029s"
testing.test_ml,test_model,DEBUG,2022-06-11 14:13:07,"Model on table 8 (5000000-10.parquet)"
algorithms.machine_learning,find_unique_columns,DEBUG,2022-06-11 14:13:09,"Preparation: 0.01116517186164856s, prediction: 1.890425894409418s"
testing.test_ml,test_model,DEBUG,2022-06-11 14:13:15,"Model on table 9 (50000000-10.parquet)"
algorithms.machine_learning,find_unique_columns,DEBUG,2022-06-11 14:13:18,"Preparation: 0.011420611292123795s, prediction: 1.901659943163395s"
testing.test_ml,test_model,DEBUG,2022-06-11 14:14:36,"Naive algorithm on table 1 (100-10.parquet)"
testing.test_ml,test_model,DEBUG,2022-06-11 14:14:36,"Naive algorithm on table 2 (1000-10.parquet)"
testing.test_ml,test_model,DEBUG,2022-06-11 14:14:36,"Naive algorithm on table 3 (10000-10.parquet)"
testing.test_ml,test_model,DEBUG,2022-06-11 14:14:36,"Naive algorithm on table 4 (100000-10.parquet)"
testing.test_ml,test_model,DEBUG,2022-06-11 14:14:36,"Naive algorithm on table 5 (1000000-10.parquet)"
testing.test_ml,test_model,DEBUG,2022-06-11 14:14:41,"Naive algorithm on table 6 (10000000-10.parquet)"
testing.test_ml,test_model,DEBUG,2022-06-11 14:15:45,"Naive algorithm on table 7 (100000000-10.parquet)"
testing.test_ml,test_model,DEBUG,2022-06-11 14:30:03,"Naive algorithm on table 8 (5000000-10.parquet)"
testing.test_ml,test_model,DEBUG,2022-06-11 14:30:33,"Naive algorithm on table 9 (50000000-10.parquet)"
testing.test_ml,test_model,INFO,2022-06-11 14:36:55,"Finished testing"
__main__,random_int,INFO,2022-06-11 14:36:55,"Finished random_int test"
__main__,random_int,INFO,2022-06-11 14:36:55,"Started random_int test with filetype parquet and a maximum of 100,000,000 rows (small_table=False, 80% nuniques)"
testing.test_ml,test_model,INFO,2022-06-11 14:36:55,"Started testing of a model with 20 rows"
testing.test_ml,test_model,DEBUG,2022-06-11 14:36:57,"Model on table 1 (100-10.parquet)"
algorithms.machine_learning,find_unique_columns,DEBUG,2022-06-11 14:36:59,"Preparation: 0.011228784918785095s, prediction: 1.8861865513026714s"
testing.test_ml,test_model,DEBUG,2022-06-11 14:36:59,"Model on table 2 (1000-10.parquet)"
algorithms.machine_learning,find_unique_columns,DEBUG,2022-06-11 14:37:00,"Preparation: 0.010978978127241135s, prediction: 1.8876894488930702s"
testing.test_ml,test_model,DEBUG,2022-06-11 14:37:00,"Model on table 3 (10000-10.parquet)"
algorithms.machine_learning,find_unique_columns,DEBUG,2022-06-11 14:37:02,"Preparation: 0.011041063815355301s, prediction: 1.8882340639829636s"
testing.test_ml,test_model,DEBUG,2022-06-11 14:37:02,"Model on table 4 (100000-10.parquet)"
algorithms.machine_learning,find_unique_columns,DEBUG,2022-06-11 14:37:04,"Preparation: 0.010959066450595856s, prediction: 1.8906087800860405s"
testing.test_ml,test_model,DEBUG,2022-06-11 14:37:04,"Model on table 5 (1000000-10.parquet)"
algorithms.machine_learning,find_unique_columns,DEBUG,2022-06-11 14:37:06,"Preparation: 0.011085648089647293s, prediction: 1.883915487676859s"
testing.test_ml,test_model,DEBUG,2022-06-11 14:37:07,"Model on table 6 (10000000-10.parquet)"
algorithms.machine_learning,find_unique_columns,DEBUG,2022-06-11 14:37:10,"Preparation: 0.011029273271560669s, prediction: 1.8809248246252537s"
testing.test_ml,test_model,DEBUG,2022-06-11 14:37:22,"Model on table 7 (100000000-10.parquet)"
algorithms.machine_learning,find_unique_columns,DEBUG,2022-06-11 14:37:29,"Preparation: 0.01135868951678276s, prediction: 1.8915696702897549s"
testing.test_ml,test_model,DEBUG,2022-06-11 14:40:20,"Model on table 8 (5000000-10.parquet)"
algorithms.machine_learning,find_unique_columns,DEBUG,2022-06-11 14:40:22,"Preparation: 0.011585358530282974s, prediction: 1.8948182798922062s"
testing.test_ml,test_model,DEBUG,2022-06-11 14:40:28,"Model on table 9 (50000000-10.parquet)"
algorithms.machine_learning,find_unique_columns,DEBUG,2022-06-11 14:40:32,"Preparation: 0.01145104318857193s, prediction: 1.897082593291998s"
testing.test_ml,test_model,DEBUG,2022-06-11 14:41:48,"Naive algorithm on table 1 (100-10.parquet)"
testing.test_ml,test_model,DEBUG,2022-06-11 14:41:48,"Naive algorithm on table 2 (1000-10.parquet)"
testing.test_ml,test_model,DEBUG,2022-06-11 14:41:48,"Naive algorithm on table 3 (10000-10.parquet)"
testing.test_ml,test_model,DEBUG,2022-06-11 14:41:48,"Naive algorithm on table 4 (100000-10.parquet)"
testing.test_ml,test_model,DEBUG,2022-06-11 14:41:49,"Naive algorithm on table 5 (1000000-10.parquet)"
testing.test_ml,test_model,DEBUG,2022-06-11 14:41:53,"Naive algorithm on table 6 (10000000-10.parquet)"
testing.test_ml,test_model,DEBUG,2022-06-11 14:42:56,"Naive algorithm on table 7 (100000000-10.parquet)"
testing.test_ml,test_model,DEBUG,2022-06-11 14:57:13,"Naive algorithm on table 8 (5000000-10.parquet)"
testing.test_ml,test_model,DEBUG,2022-06-11 14:57:42,"Naive algorithm on table 9 (50000000-10.parquet)"
testing.test_ml,test_model,INFO,2022-06-11 15:04:03,"Finished testing"
__main__,random_int,INFO,2022-06-11 15:04:03,"Finished random_int test"
__main__,random_int,INFO,2022-06-11 15:04:03,"Started random_int test with filetype csv and a maximum of 100,000,000 rows (small_table=False, 80% nuniques)"
testing.test_ml,generate_random_int_dataframe,DEBUG,2022-06-11 15:04:03,"Generating random_int table with 100 rows and 10 columns (80% nuniques)"
testing.test_ml,generate_random_int_dataframe,DEBUG,2022-06-11 15:04:03,"Generating random_int table with 1,000 rows and 10 columns (80% nuniques)"
testing.test_ml,generate_random_int_dataframe,DEBUG,2022-06-11 15:04:03,"Generating random_int table with 10,000 rows and 10 columns (80% nuniques)"
testing.test_ml,generate_random_int_dataframe,DEBUG,2022-06-11 15:04:03,"Generating random_int table with 100,000 rows and 10 columns (80% nuniques)"
testing.test_ml,generate_random_int_dataframe,DEBUG,2022-06-11 15:04:04,"Generating random_int table with 1,000,000 rows and 10 columns (80% nuniques)"
testing.test_ml,generate_random_int_dataframe,DEBUG,2022-06-11 15:04:08,"Generating random_int table with 5,000,000 rows and 10 columns (80% nuniques)"
testing.test_ml,generate_random_int_dataframe,DEBUG,2022-06-11 15:04:33,"Generating random_int table with 10,000,000 rows and 10 columns (80% nuniques)"
testing.test_ml,generate_random_int_dataframe,DEBUG,2022-06-11 15:05:31,"Generating random_int table with 50,000,000 rows and 10 columns (80% nuniques)"
testing.test_ml,generate_random_int_dataframe,DEBUG,2022-06-11 15:10:19,"Generating random_int table with 100,000,000 rows and 10 columns (80% nuniques)"
testing.test_ml,test_model,INFO,2022-06-11 15:19:51,"Started testing of a model with 20 rows"
testing.test_ml,test_model,DEBUG,2022-06-11 15:19:52,"Model on table 1 (100-10.csv)"
algorithms.machine_learning,find_unique_columns,DEBUG,2022-06-11 15:19:54,"Preparation: 0.010943625122308731s, prediction: 1.8759313598275185s"
testing.test_ml,test_model,DEBUG,2022-06-11 15:19:54,"Model on table 2 (1000-10.csv)"
algorithms.machine_learning,find_unique_columns,DEBUG,2022-06-11 15:19:56,"Preparation: 0.01082649827003479s, prediction: 1.8815124072134495s"
testing.test_ml,test_model,DEBUG,2022-06-11 15:19:56,"Model on table 3 (10000-10.csv)"
algorithms.machine_learning,find_unique_columns,DEBUG,2022-06-11 15:19:58,"Preparation: 0.010927341878414154s, prediction: 1.8802483640611172s"
testing.test_ml,test_model,DEBUG,2022-06-11 15:19:58,"Model on table 4 (100000-10.csv)"
algorithms.machine_learning,find_unique_columns,DEBUG,2022-06-11 15:20:00,"Preparation: 0.011293064802885056s, prediction: 1.877238281071186s"
testing.test_ml,test_model,DEBUG,2022-06-11 15:20:00,"Model on table 5 (1000000-10.csv)"
algorithms.machine_learning,find_unique_columns,DEBUG,2022-06-11 15:20:02,"Preparation: 0.011576812714338303s, prediction: 1.8772572949528694s"
testing.test_ml,test_model,DEBUG,2022-06-11 15:20:03,"Model on table 6 (10000000-10.csv)"
algorithms.machine_learning,find_unique_columns,DEBUG,2022-06-11 15:20:09,"Preparation: 0.011515289545059204s, prediction: 1.8801536783576012s"
testing.test_ml,test_model,DEBUG,2022-06-11 15:20:22,"Model on table 7 (100000000-10.csv)"
algorithms.machine_learning,find_unique_columns,DEBUG,2022-06-11 15:21:16,"Preparation: 0.011545751243829727s, prediction: 1.882815033197403s"
testing.test_ml,test_model,DEBUG,2022-06-11 15:24:05,"Model on table 8 (5000000-10.csv)"
algorithms.machine_learning,find_unique_columns,DEBUG,2022-06-11 15:24:10,"Preparation: 0.011990301311016083s, prediction: 1.8736699186265469s"
testing.test_ml,test_model,DEBUG,2022-06-11 15:24:16,"Model on table 9 (50000000-10.csv)"
algorithms.machine_learning,find_unique_columns,DEBUG,2022-06-11 15:24:44,"Preparation: 0.01154482364654541s, prediction: 1.8789939060807228s"
testing.test_ml,test_model,DEBUG,2022-06-11 15:26:00,"Naive algorithm on table 1 (100-10.csv)"
testing.test_ml,test_model,DEBUG,2022-06-11 15:26:00,"Naive algorithm on table 2 (1000-10.csv)"
testing.test_ml,test_model,DEBUG,2022-06-11 15:26:00,"Naive algorithm on table 3 (10000-10.csv)"
testing.test_ml,test_model,DEBUG,2022-06-11 15:26:00,"Naive algorithm on table 4 (100000-10.csv)"
testing.test_ml,test_model,DEBUG,2022-06-11 15:26:01,"Naive algorithm on table 5 (1000000-10.csv)"
testing.test_ml,test_model,DEBUG,2022-06-11 15:26:06,"Naive algorithm on table 6 (10000000-10.csv)"
testing.test_ml,test_model,DEBUG,2022-06-11 15:27:13,"Naive algorithm on table 7 (100000000-10.csv)"
testing.test_ml,test_model,DEBUG,2022-06-11 15:42:22,"Naive algorithm on table 8 (5000000-10.csv)"
testing.test_ml,test_model,DEBUG,2022-06-11 15:42:53,"Naive algorithm on table 9 (50000000-10.csv)"
testing.test_ml,test_model,INFO,2022-06-11 15:49:41,"Finished testing"
__main__,random_int,INFO,2022-06-11 15:49:41,"Finished random_int test"
__main__,random_int,INFO,2022-06-11 15:49:41,"Started random_int test with filetype parquet and a maximum of 100,000,000 rows (small_table=True, 90% nuniques)"
testing.test_ml,generate_random_int_dataframe,DEBUG,2022-06-11 15:49:41,"Generating random_int table with 100 rows and 10 columns (90% nuniques)"
testing.test_ml,generate_random_int_dataframe,DEBUG,2022-06-11 15:49:41,"Generating random_int table with 1,000 rows and 10 columns (90% nuniques)"
testing.test_ml,generate_random_int_dataframe,DEBUG,2022-06-11 15:49:41,"Generating random_int table with 10,000 rows and 10 columns (90% nuniques)"
testing.test_ml,generate_random_int_dataframe,DEBUG,2022-06-11 15:49:41,"Generating random_int table with 100,000 rows and 10 columns (90% nuniques)"
testing.test_ml,generate_random_int_dataframe,DEBUG,2022-06-11 15:49:41,"Generating random_int table with 1,000,000 rows and 10 columns (90% nuniques)"
testing.test_ml,generate_random_int_dataframe,DEBUG,2022-06-11 15:49:44,"Generating random_int table with 5,000,000 rows and 10 columns (90% nuniques)"
testing.test_ml,generate_random_int_dataframe,DEBUG,2022-06-11 15:49:59,"Generating random_int table with 10,000,000 rows and 10 columns (90% nuniques)"
testing.test_ml,generate_random_int_dataframe,DEBUG,2022-06-11 15:50:32,"Generating random_int table with 50,000,000 rows and 10 columns (90% nuniques)"
testing.test_ml,generate_random_int_dataframe,DEBUG,2022-06-11 15:53:19,"Generating random_int table with 100,000,000 rows and 10 columns (90% nuniques)"
testing.test_ml,test_model,INFO,2022-06-11 15:58:42,"Started testing of a model with 20 rows"
testing.test_ml,test_model,DEBUG,2022-06-11 15:58:44,"Model on table 1 (100-10.parquet)"
algorithms.machine_learning,find_unique_columns,DEBUG,2022-06-11 15:58:46,"Preparation: 0.01000114157795906s, prediction: 1.908164069056511s"
testing.test_ml,test_model,DEBUG,2022-06-11 15:58:46,"Model on table 2 (1000-10.parquet)"
algorithms.machine_learning,find_unique_columns,DEBUG,2022-06-11 15:58:47,"Preparation: 0.009877197444438934s, prediction: 1.889316949993372s"
testing.test_ml,test_model,DEBUG,2022-06-11 15:58:47,"Model on table 3 (10000-10.parquet)"
algorithms.machine_learning,find_unique_columns,DEBUG,2022-06-11 15:58:49,"Preparation: 0.00981954112648964s, prediction: 1.8825755007565022s"
testing.test_ml,test_model,DEBUG,2022-06-11 15:58:49,"Model on table 4 (100000-10.parquet)"
algorithms.machine_learning,find_unique_columns,DEBUG,2022-06-11 15:58:51,"Preparation: 0.010193675756454468s, prediction: 1.8903008811175823s"
testing.test_ml,test_model,DEBUG,2022-06-11 15:58:51,"Model on table 5 (1000000-10.parquet)"
algorithms.machine_learning,find_unique_columns,DEBUG,2022-06-11 15:58:53,"Preparation: 0.010232999920845032s, prediction: 1.8886176012456417s"
testing.test_ml,test_model,DEBUG,2022-06-11 15:58:54,"Model on table 6 (10000000-10.parquet)"
algorithms.machine_learning,find_unique_columns,DEBUG,2022-06-11 15:58:56,"Preparation: 0.010174807161092758s, prediction: 1.881952214986086s"
testing.test_ml,test_model,DEBUG,2022-06-11 15:59:02,"Model on table 7 (100000000-10.parquet)"
algorithms.machine_learning,find_unique_columns,DEBUG,2022-06-11 15:59:06,"Preparation: 0.010227397084236145s, prediction: 1.8833457604050636s"
testing.test_ml,test_model,DEBUG,2022-06-11 16:00:33,"Model on table 8 (5000000-10.parquet)"
algorithms.machine_learning,find_unique_columns,DEBUG,2022-06-11 16:00:35,"Preparation: 0.01018303632736206s, prediction: 1.8836959153413773s"
testing.test_ml,test_model,DEBUG,2022-06-11 16:00:38,"Model on table 9 (50000000-10.parquet)"
algorithms.machine_learning,find_unique_columns,DEBUG,2022-06-11 16:00:42,"Preparation: 0.010121915489435196s, prediction: 1.8836573287844658s"
testing.test_ml,test_model,DEBUG,2022-06-11 16:01:20,"Naive algorithm on table 1 (100-10.parquet)"
testing.test_ml,test_model,DEBUG,2022-06-11 16:01:20,"Naive algorithm on table 2 (1000-10.parquet)"
testing.test_ml,test_model,DEBUG,2022-06-11 16:01:20,"Naive algorithm on table 3 (10000-10.parquet)"
testing.test_ml,test_model,DEBUG,2022-06-11 16:01:20,"Naive algorithm on table 4 (100000-10.parquet)"
testing.test_ml,test_model,DEBUG,2022-06-11 16:01:21,"Naive algorithm on table 5 (1000000-10.parquet)"
testing.test_ml,test_model,DEBUG,2022-06-11 16:01:25,"Naive algorithm on table 6 (10000000-10.parquet)"
testing.test_ml,test_model,DEBUG,2022-06-11 16:02:29,"Naive algorithm on table 7 (100000000-10.parquet)"
testing.test_ml,test_model,DEBUG,2022-06-11 16:16:52,"Naive algorithm on table 8 (5000000-10.parquet)"
testing.test_ml,test_model,DEBUG,2022-06-11 16:17:22,"Naive algorithm on table 9 (50000000-10.parquet)"
testing.test_ml,test_model,INFO,2022-06-11 16:23:46,"Finished testing"
__main__,random_int,INFO,2022-06-11 16:23:46,"Finished random_int test"
__main__,random_int,INFO,2022-06-11 16:23:46,"Started random_int test with filetype parquet and a maximum of 100,000,000 rows (small_table=False, 90% nuniques)"
testing.test_ml,test_model,INFO,2022-06-11 16:23:46,"Started testing of a model with 20 rows"
testing.test_ml,test_model,DEBUG,2022-06-11 16:23:47,"Model on table 1 (100-10.parquet)"
algorithms.machine_learning,find_unique_columns,DEBUG,2022-06-11 16:23:49,"Preparation: 0.010007839649915695s, prediction: 1.8768846914172173s"
testing.test_ml,test_model,DEBUG,2022-06-11 16:23:49,"Model on table 2 (1000-10.parquet)"
algorithms.machine_learning,find_unique_columns,DEBUG,2022-06-11 16:23:51,"Preparation: 0.009819559752941132s, prediction: 1.8799927830696106s"
testing.test_ml,test_model,DEBUG,2022-06-11 16:23:51,"Model on table 3 (10000-10.parquet)"
algorithms.machine_learning,find_unique_columns,DEBUG,2022-06-11 16:23:53,"Preparation: 0.009839922189712524s, prediction: 1.878179743885994s"
testing.test_ml,test_model,DEBUG,2022-06-11 16:23:53,"Model on table 4 (100000-10.parquet)"
algorithms.machine_learning,find_unique_columns,DEBUG,2022-06-11 16:23:55,"Preparation: 0.01001645252108574s, prediction: 1.8835364803671837s"
testing.test_ml,test_model,DEBUG,2022-06-11 16:23:55,"Model on table 5 (1000000-10.parquet)"
algorithms.machine_learning,find_unique_columns,DEBUG,2022-06-11 16:23:57,"Preparation: 0.010339658707380295s, prediction: 1.8854341395199299s"
testing.test_ml,test_model,DEBUG,2022-06-11 16:23:57,"Model on table 6 (10000000-10.parquet)"
algorithms.machine_learning,find_unique_columns,DEBUG,2022-06-11 16:24:00,"Preparation: 0.010424107313156128s, prediction: 1.8841223903000355s"
testing.test_ml,test_model,DEBUG,2022-06-11 16:24:06,"Model on table 7 (100000000-10.parquet)"
algorithms.machine_learning,find_unique_columns,DEBUG,2022-06-11 16:24:12,"Preparation: 0.01037970557808876s, prediction: 1.878866981714964s"
testing.test_ml,test_model,DEBUG,2022-06-11 16:25:38,"Model on table 8 (5000000-10.parquet)"
algorithms.machine_learning,find_unique_columns,DEBUG,2022-06-11 16:25:40,"Preparation: 0.01043383777141571s, prediction: 1.8846824392676353s"
testing.test_ml,test_model,DEBUG,2022-06-11 16:25:43,"Model on table 9 (50000000-10.parquet)"
algorithms.machine_learning,find_unique_columns,DEBUG,2022-06-11 16:25:47,"Preparation: 0.01061103492975235s, prediction: 1.8821176663041115s"
testing.test_ml,test_model,DEBUG,2022-06-11 16:26:25,"Naive algorithm on table 1 (100-10.parquet)"
testing.test_ml,test_model,DEBUG,2022-06-11 16:26:25,"Naive algorithm on table 2 (1000-10.parquet)"
testing.test_ml,test_model,DEBUG,2022-06-11 16:26:25,"Naive algorithm on table 3 (10000-10.parquet)"
testing.test_ml,test_model,DEBUG,2022-06-11 16:26:25,"Naive algorithm on table 4 (100000-10.parquet)"
testing.test_ml,test_model,DEBUG,2022-06-11 16:26:26,"Naive algorithm on table 5 (1000000-10.parquet)"
testing.test_ml,test_model,DEBUG,2022-06-11 16:26:30,"Naive algorithm on table 6 (10000000-10.parquet)"
testing.test_ml,test_model,DEBUG,2022-06-11 16:27:34,"Naive algorithm on table 7 (100000000-10.parquet)"
testing.test_ml,test_model,DEBUG,2022-06-11 16:41:55,"Naive algorithm on table 8 (5000000-10.parquet)"
testing.test_ml,test_model,DEBUG,2022-06-11 16:42:25,"Naive algorithm on table 9 (50000000-10.parquet)"
testing.test_ml,test_model,INFO,2022-06-11 16:48:47,"Finished testing"
__main__,random_int,INFO,2022-06-11 16:48:47,"Finished random_int test"
__main__,random_int,INFO,2022-06-11 16:48:47,"Started random_int test with filetype csv and a maximum of 100,000,000 rows (small_table=False, 90% nuniques)"
testing.test_ml,generate_random_int_dataframe,DEBUG,2022-06-11 16:48:47,"Generating random_int table with 100 rows and 10 columns (90% nuniques)"
testing.test_ml,generate_random_int_dataframe,DEBUG,2022-06-11 16:48:47,"Generating random_int table with 1,000 rows and 10 columns (90% nuniques)"
testing.test_ml,generate_random_int_dataframe,DEBUG,2022-06-11 16:48:47,"Generating random_int table with 10,000 rows and 10 columns (90% nuniques)"
testing.test_ml,generate_random_int_dataframe,DEBUG,2022-06-11 16:48:47,"Generating random_int table with 100,000 rows and 10 columns (90% nuniques)"
testing.test_ml,generate_random_int_dataframe,DEBUG,2022-06-11 16:48:48,"Generating random_int table with 1,000,000 rows and 10 columns (90% nuniques)"
testing.test_ml,generate_random_int_dataframe,DEBUG,2022-06-11 16:48:52,"Generating random_int table with 5,000,000 rows and 10 columns (90% nuniques)"
testing.test_ml,generate_random_int_dataframe,DEBUG,2022-06-11 16:49:21,"Generating random_int table with 10,000,000 rows and 10 columns (90% nuniques)"
testing.test_ml,generate_random_int_dataframe,DEBUG,2022-06-11 16:50:17,"Generating random_int table with 50,000,000 rows and 10 columns (90% nuniques)"
testing.test_ml,generate_random_int_dataframe,DEBUG,2022-06-11 16:55:01,"Generating random_int table with 100,000,000 rows and 10 columns (90% nuniques)"
testing.test_ml,test_model,INFO,2022-06-11 17:04:24,"Started testing of a model with 20 rows"
testing.test_ml,test_model,DEBUG,2022-06-11 17:04:25,"Model on table 1 (100-10.csv)"
algorithms.machine_learning,find_unique_columns,DEBUG,2022-06-11 17:04:27,"Preparation: 0.009830418974161148s, prediction: 1.8768651224672794s"
testing.test_ml,test_model,DEBUG,2022-06-11 17:04:27,"Model on table 2 (1000-10.csv)"
algorithms.machine_learning,find_unique_columns,DEBUG,2022-06-11 17:04:29,"Preparation: 0.009749248623847961s, prediction: 1.8848202787339687s"
testing.test_ml,test_model,DEBUG,2022-06-11 17:04:29,"Model on table 3 (10000-10.csv)"
algorithms.machine_learning,find_unique_columns,DEBUG,2022-06-11 17:04:31,"Preparation: 0.009889181703329086s, prediction: 1.8792497217655182s"
testing.test_ml,test_model,DEBUG,2022-06-11 17:04:31,"Model on table 4 (100000-10.csv)"
algorithms.machine_learning,find_unique_columns,DEBUG,2022-06-11 17:04:33,"Preparation: 0.010230869054794312s, prediction: 1.8861300125718117s"
testing.test_ml,test_model,DEBUG,2022-06-11 17:04:33,"Model on table 5 (1000000-10.csv)"
algorithms.machine_learning,find_unique_columns,DEBUG,2022-06-11 17:04:35,"Preparation: 0.010303083807229996s, prediction: 1.8757633194327354s"
testing.test_ml,test_model,DEBUG,2022-06-11 17:04:36,"Model on table 6 (10000000-10.csv)"
algorithms.machine_learning,find_unique_columns,DEBUG,2022-06-11 17:04:42,"Preparation: 0.010606970638036728s, prediction: 1.875340286642313s"
testing.test_ml,test_model,DEBUG,2022-06-11 17:04:48,"Model on table 7 (100000000-10.csv)"
algorithms.machine_learning,find_unique_columns,DEBUG,2022-06-11 17:05:41,"Preparation: 0.01072106882929802s, prediction: 1.8744292296469212s"
testing.test_ml,test_model,DEBUG,2022-06-11 17:07:07,"Model on table 8 (5000000-10.csv)"
algorithms.machine_learning,find_unique_columns,DEBUG,2022-06-11 17:07:11,"Preparation: 0.010714992880821228s, prediction: 1.8787161260843277s"
testing.test_ml,test_model,DEBUG,2022-06-11 17:07:14,"Model on table 9 (50000000-10.csv)"
algorithms.machine_learning,find_unique_columns,DEBUG,2022-06-11 17:07:42,"Preparation: 0.010757163166999817s, prediction: 1.8713227100670338s"
testing.test_ml,test_model,DEBUG,2022-06-11 17:08:21,"Naive algorithm on table 1 (100-10.csv)"
testing.test_ml,test_model,DEBUG,2022-06-11 17:08:21,"Naive algorithm on table 2 (1000-10.csv)"
testing.test_ml,test_model,DEBUG,2022-06-11 17:08:21,"Naive algorithm on table 3 (10000-10.csv)"
testing.test_ml,test_model,DEBUG,2022-06-11 17:08:21,"Naive algorithm on table 4 (100000-10.csv)"
testing.test_ml,test_model,DEBUG,2022-06-11 17:08:21,"Naive algorithm on table 5 (1000000-10.csv)"
testing.test_ml,test_model,DEBUG,2022-06-11 17:08:26,"Naive algorithm on table 6 (10000000-10.csv)"
testing.test_ml,test_model,DEBUG,2022-06-11 17:09:34,"Naive algorithm on table 7 (100000000-10.csv)"
testing.test_ml,test_model,DEBUG,2022-06-11 17:24:37,"Naive algorithm on table 8 (5000000-10.csv)"
testing.test_ml,test_model,DEBUG,2022-06-11 17:25:09,"Naive algorithm on table 9 (50000000-10.csv)"
testing.test_ml,test_model,INFO,2022-06-11 17:31:53,"Finished testing"
__main__,random_int,INFO,2022-06-11 17:31:53,"Finished random_int test"
